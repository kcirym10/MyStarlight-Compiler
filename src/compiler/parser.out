Grammar:

Rule 0     S' -> program
Rule 1     program -> PROGRAM np_create_global_symTable ID np_program_record ; opt_vars opt_classes opt_funcs main end
Rule 2     np_create_global_symTable -> <empty>
Rule 3     np_program_record -> <empty>
Rule 4     opt_vars -> eps
Rule 5     opt_vars -> vars
Rule 6     opt_classes -> eps
Rule 7     opt_classes -> classes
Rule 8     opt_funcs -> eps
Rule 9     opt_funcs -> functions
Rule 10    vars -> VAR np_create_var_table var_type
Rule 11    np_create_var_table -> <empty>
Rule 12    np_exit_scope -> <empty>
Rule 13    var_type -> compound ; more_var_types
Rule 14    var_type -> simple ; more_var_types
Rule 15    more_var_types -> eps
Rule 16    more_var_types -> var_type
Rule 17    simple -> type ID np_save_id moreids
Rule 18    np_save_id -> <empty>
Rule 19    moreids -> eps
Rule 20    moreids -> , ID np_save_id moreids
Rule 21    compound -> type ID [ CTE_INT two_dim ] more_arr_ids
Rule 22    compound -> CLASS_ID np_class_id ID np_save_id moreids
Rule 23    np_class_id -> <empty>
Rule 24    more_arr_ids -> eps
Rule 25    more_arr_ids -> , ID np_save_id [ CTE_INT two_dim ] more_arr_ids
Rule 26    two_dim -> eps
Rule 27    two_dim -> , CTE_INT
Rule 28    classes -> eps
Rule 29    classes -> CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation { opt_vars opt_methods } np_exit_scope classes
Rule 30    np_prepare_class -> <empty>
Rule 31    opt_derivation -> eps
Rule 32    opt_derivation -> DERIVES CLASS_ID np_copy_class_record
Rule 33    np_copy_class_record -> <empty>
Rule 34    opt_methods -> eps
Rule 35    opt_methods -> methods
Rule 36    methods -> METHODS : functions
Rule 37    functions -> eps
Rule 38    functions -> function
Rule 39    function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions
Rule 40    np_save_func_id -> <empty>
Rule 41    np_endfunc -> <empty>
Rule 42    func_types -> VOID
Rule 43    func_types -> type
Rule 44    opt_param -> eps
Rule 45    opt_param -> param
Rule 46    moreparams -> eps
Rule 47    moreparams -> , param opt_param
Rule 48    param -> type ID np_save_id np_save_param moreparams
Rule 49    np_save_param -> <empty>
Rule 50    type -> CHAR
Rule 51    type -> FLOAT
Rule 52    type -> INT
Rule 53    body -> opt_stmts
Rule 54    opt_stmts -> eps
Rule 55    opt_stmts -> statements opt_stmts
Rule 56    statements -> function_return
Rule 57    statements -> call_func
Rule 58    statements -> cycles
Rule 59    statements -> conditional
Rule 60    statements -> assign
Rule 61    statements -> read
Rule 62    statements -> print
Rule 63    print -> PRINT ( p_args ) ;
Rule 64    p_args -> expression np_create_print_quad more_args
Rule 65    p_args -> CTE_STRING np_create_print_quad more_args
Rule 66    np_create_print_quad -> <empty>
Rule 67    more_args -> eps
Rule 68    more_args -> , p_args
Rule 69    read -> READ ( r_args ) ;
Rule 70    r_args -> variable np_create_read_quad more_r_args
Rule 71    more_r_args -> eps
Rule 72    more_r_args -> , r_args
Rule 73    np_create_read_quad -> <empty>
Rule 74    assign -> variable = np_push_operator expression ; np_check_assignment_operator
Rule 75    np_check_assignment_operator -> <empty>
Rule 76    conditional -> IF ( expression ) np_if { body } opt_else np_end_if
Rule 77    np_if -> <empty>
Rule 78    np_end_if -> <empty>
Rule 79    opt_else -> eps
Rule 80    opt_else -> ELSE np_else { body }
Rule 81    np_else -> <empty>
Rule 82    cycles -> while_loop
Rule 83    cycles -> for_loop
Rule 84    for_loop -> FOR ( ID = expression TO expression ) { body }
Rule 85    while_loop -> WHILE np_cycle_start ( expression ) np_while { body } np_while_return
Rule 86    np_cycle_start -> <empty>
Rule 87    np_while -> <empty>
Rule 88    np_while_return -> <empty>
Rule 89    call_func -> call_func_body ;
Rule 90    call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
Rule 91    opt_class_func -> eps
Rule 92    opt_class_func -> . ID
Rule 93    np_func_call -> <empty>
Rule 94    np_func_ERA -> <empty>
Rule 95    np_func_gosub -> <empty>
Rule 96    opt_call_params -> eps
Rule 97    opt_call_params -> expression np_func_param more_expressions
Rule 98    np_func_param -> <empty>
Rule 99    more_expressions -> eps
Rule 100   more_expressions -> , opt_call_params
Rule 101   function_return -> RETURN ( expression ) ;
Rule 102   variable -> ID opt_class_func opt_arr_call np_push_var_operand
Rule 103   np_push_var_operand -> <empty>
Rule 104   opt_arr_call -> eps
Rule 105   opt_arr_call -> [ expression opt_dim_call ]
Rule 106   opt_dim_call -> eps
Rule 107   opt_dim_call -> , expression
Rule 108   expression -> t_exp np_check_or_operator exp_or
Rule 109   np_check_or_operator -> <empty>
Rule 110   exp_or -> eps
Rule 111   exp_or -> | np_push_operator expression
Rule 112   np_push_operator -> <empty>
Rule 113   np_push_or_operator -> <empty>
Rule 114   t_exp -> g_exp np_check_and_operator t_and
Rule 115   np_check_and_operator -> <empty>
Rule 116   t_and -> eps
Rule 117   t_and -> & np_push_operator t_exp
Rule 118   g_exp -> m_exp np_check_g_operator g_exp_opers
Rule 119   np_check_g_operator -> <empty>
Rule 120   g_exp_opers -> eps
Rule 121   g_exp_opers -> EQUAL_TO np_push_operator g_exp
Rule 122   g_exp_opers -> NOT_EQUAL_TO np_push_operator g_exp
Rule 123   g_exp_opers -> LESS_OR_EQUAL_TO np_push_operator g_exp
Rule 124   g_exp_opers -> GREATER_OR_EQUAL_TO np_push_operator g_exp
Rule 125   g_exp_opers -> > np_push_operator g_exp
Rule 126   g_exp_opers -> < np_push_operator g_exp
Rule 127   m_exp -> t np_check_m_operator m_opers
Rule 128   np_check_m_operator -> <empty>
Rule 129   m_opers -> eps
Rule 130   m_opers -> - np_push_operator m_exp
Rule 131   m_opers -> + np_push_operator m_exp
Rule 132   t -> f np_check_t_operator t_opers
Rule 133   np_check_t_operator -> <empty>
Rule 134   t_opers -> eps
Rule 135   t_opers -> / np_push_operator t
Rule 136   t_opers -> * np_push_operator t
Rule 137   f -> var_cte
Rule 138   f -> call_func_body
Rule 139   f -> variable
Rule 140   f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom
Rule 141   np_add_fake_bottom -> <empty>
Rule 142   np_rem_fake_bottom -> <empty>
Rule 143   var_cte -> CTE_CHAR
Rule 144   var_cte -> CTE_FLOAT
Rule 145   var_cte -> CTE_INT
Rule 146   main -> MAIN np_save_main_id ( ) opt_vars { body } np_exit_scope
Rule 147   np_save_main_id -> <empty>
Rule 148   end -> <empty>
Rule 149   eps -> <empty>

Terminals, with rules where they appear:

&                    : 117
(                    : 39 63 69 76 84 85 90 101 140 146
)                    : 39 63 69 76 84 85 90 101 140 146
*                    : 136
+                    : 131
,                    : 20 25 27 47 68 72 100 107
-                    : 130
.                    : 92
/                    : 135
:                    : 36
;                    : 1 13 14 63 69 74 89 101
<                    : 126
=                    : 74 84
>                    : 125
CHAR                 : 50
CLASS                : 29
CLASS_ID             : 22 29 32
CTE_CHAR             : 143
CTE_FLOAT            : 144
CTE_INT              : 21 25 27 145
CTE_STRING           : 65
DERIVES              : 32
ELSE                 : 80
EQUAL_TO             : 121
FLOAT                : 51
FOR                  : 84
FUNC                 : 39
GREATER_OR_EQUAL_TO  : 124
ID                   : 1 17 20 21 22 25 39 48 84 90 92 102
IF                   : 76
INT                  : 52
LESS_OR_EQUAL_TO     : 123
MAIN                 : 146
METHODS              : 36
NOT_EQUAL_TO         : 122
PRINT                : 63
PROGRAM              : 1
READ                 : 69
RETURN               : 101
TO                   : 84
VAR                  : 10
VOID                 : 42
WHILE                : 85
[                    : 21 25 105
]                    : 21 25 105
error                : 
{                    : 29 39 76 80 84 85 146
|                    : 111
}                    : 29 39 76 80 84 85 146

Nonterminals, with rules where they appear:

assign               : 60
body                 : 39 76 80 84 85 146
call_func            : 57
call_func_body       : 89 138
classes              : 7 29
compound             : 13
conditional          : 59
cycles               : 58
end                  : 1
eps                  : 4 6 8 15 19 24 26 28 31 34 37 44 46 54 67 71 79 91 96 99 104 106 110 116 120 129 134
exp_or               : 108
expression           : 64 74 76 84 84 85 97 101 105 107 111 140
f                    : 132
for_loop             : 83
func_types           : 39
function             : 38
function_return      : 56
functions            : 9 36 39
g_exp                : 114 121 122 123 124 125 126
g_exp_opers          : 118
m_exp                : 118 130 131
m_opers              : 127
main                 : 1
methods              : 35
more_args            : 64 65
more_arr_ids         : 21 25
more_expressions     : 97
more_r_args          : 70
more_var_types       : 13 14
moreids              : 17 20 22
moreparams           : 48
np_add_fake_bottom   : 140
np_check_and_operator : 114
np_check_assignment_operator : 74
np_check_g_operator  : 118
np_check_m_operator  : 127
np_check_or_operator : 108
np_check_t_operator  : 132
np_class_id          : 22
np_copy_class_record : 32
np_create_global_symTable : 1
np_create_print_quad : 64 65
np_create_read_quad  : 70
np_create_var_table  : 10 39
np_cycle_start       : 85
np_else              : 80
np_end_if            : 76
np_endfunc           : 39
np_exit_scope        : 29 39 146
np_func_ERA          : 90
np_func_call         : 90
np_func_gosub        : 90
np_func_param        : 97
np_if                : 76
np_prepare_class     : 29
np_program_record    : 1
np_push_operator     : 74 111 117 121 122 123 124 125 126 130 131 135 136
np_push_or_operator  : 
np_push_var_operand  : 102
np_rem_fake_bottom   : 140
np_save_func_id      : 29 39
np_save_id           : 17 20 22 25 48
np_save_main_id      : 146
np_save_param        : 48
np_while             : 85
np_while_return      : 85
opt_arr_call         : 102
opt_call_params      : 90 100
opt_class_func       : 90 102
opt_classes          : 1
opt_derivation       : 29
opt_dim_call         : 105
opt_else             : 76
opt_funcs            : 1
opt_methods          : 29
opt_param            : 39 47
opt_stmts            : 53 55
opt_vars             : 1 29 39 146
p_args               : 63 68
param                : 45 47
print                : 62
program              : 0
r_args               : 69 72
read                 : 61
simple               : 14
statements           : 55
t                    : 127 135 136
t_and                : 114
t_exp                : 108 117
t_opers              : 132
two_dim              : 21 25
type                 : 17 21 43 48
var_cte              : 137
var_type             : 10 16
variable             : 70 74 139
vars                 : 5
while_loop           : 82


state 0

    (0) S' -> . program
    (1) program -> . PROGRAM np_create_global_symTable ID np_program_record ; opt_vars opt_classes opt_funcs main end
    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> PROGRAM . np_create_global_symTable ID np_program_record ; opt_vars opt_classes opt_funcs main end
    (2) np_create_global_symTable -> .
    ID              reduce using rule 2 (np_create_global_symTable -> .)

    np_create_global_symTable      shift and go to state 3

state 3

    (1) program -> PROGRAM np_create_global_symTable . ID np_program_record ; opt_vars opt_classes opt_funcs main end
    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM np_create_global_symTable ID . np_program_record ; opt_vars opt_classes opt_funcs main end
    (3) np_program_record -> .
    ;               reduce using rule 3 (np_program_record -> .)

    np_program_record              shift and go to state 5

state 5

    (1) program -> PROGRAM np_create_global_symTable ID np_program_record . ; opt_vars opt_classes opt_funcs main end
    ;               shift and go to state 6


state 6

    (1) program -> PROGRAM np_create_global_symTable ID np_program_record ; . opt_vars opt_classes opt_funcs main end
    (4) opt_vars -> . eps
    (5) opt_vars -> . vars
    (149) eps -> .
    (10) vars -> . VAR np_create_var_table var_type
    CLASS           reduce using rule 149 (eps -> .)
    FUNC            reduce using rule 149 (eps -> .)
    MAIN            reduce using rule 149 (eps -> .)
    VAR             shift and go to state 10

    opt_vars                       shift and go to state 7
    eps                            shift and go to state 8
    vars                           shift and go to state 9

state 7

    (1) program -> PROGRAM np_create_global_symTable ID np_program_record ; opt_vars . opt_classes opt_funcs main end
    (6) opt_classes -> . eps
    (7) opt_classes -> . classes
    (149) eps -> .
    (28) classes -> . eps
    (29) classes -> . CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation { opt_vars opt_methods } np_exit_scope classes
    FUNC            reduce using rule 149 (eps -> .)
    MAIN            reduce using rule 149 (eps -> .)
    CLASS           shift and go to state 14

    opt_classes                    shift and go to state 11
    eps                            shift and go to state 12
    classes                        shift and go to state 13

state 8

    (4) opt_vars -> eps .
    CLASS           reduce using rule 4 (opt_vars -> eps .)
    FUNC            reduce using rule 4 (opt_vars -> eps .)
    MAIN            reduce using rule 4 (opt_vars -> eps .)
    {               reduce using rule 4 (opt_vars -> eps .)
    METHODS         reduce using rule 4 (opt_vars -> eps .)
    }               reduce using rule 4 (opt_vars -> eps .)


state 9

    (5) opt_vars -> vars .
    CLASS           reduce using rule 5 (opt_vars -> vars .)
    FUNC            reduce using rule 5 (opt_vars -> vars .)
    MAIN            reduce using rule 5 (opt_vars -> vars .)
    {               reduce using rule 5 (opt_vars -> vars .)
    METHODS         reduce using rule 5 (opt_vars -> vars .)
    }               reduce using rule 5 (opt_vars -> vars .)


state 10

    (10) vars -> VAR . np_create_var_table var_type
    (11) np_create_var_table -> .
    CLASS_ID        reduce using rule 11 (np_create_var_table -> .)
    CHAR            reduce using rule 11 (np_create_var_table -> .)
    FLOAT           reduce using rule 11 (np_create_var_table -> .)
    INT             reduce using rule 11 (np_create_var_table -> .)

    np_create_var_table            shift and go to state 15

state 11

    (1) program -> PROGRAM np_create_global_symTable ID np_program_record ; opt_vars opt_classes . opt_funcs main end
    (8) opt_funcs -> . eps
    (9) opt_funcs -> . functions
    (149) eps -> .
    (37) functions -> . eps
    (38) functions -> . function
    (39) function -> . FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions
    MAIN            reduce using rule 149 (eps -> .)
    FUNC            shift and go to state 20

    opt_funcs                      shift and go to state 16
    eps                            shift and go to state 17
    functions                      shift and go to state 18
    function                       shift and go to state 19

state 12

    (6) opt_classes -> eps .
    (28) classes -> eps .
  ! reduce/reduce conflict for FUNC resolved using rule 6 (opt_classes -> eps .)
  ! reduce/reduce conflict for MAIN resolved using rule 6 (opt_classes -> eps .)
    FUNC            reduce using rule 6 (opt_classes -> eps .)
    MAIN            reduce using rule 6 (opt_classes -> eps .)


state 13

    (7) opt_classes -> classes .
    FUNC            reduce using rule 7 (opt_classes -> classes .)
    MAIN            reduce using rule 7 (opt_classes -> classes .)


state 14

    (29) classes -> CLASS . np_prepare_class CLASS_ID np_save_func_id opt_derivation { opt_vars opt_methods } np_exit_scope classes
    (30) np_prepare_class -> .
    CLASS_ID        reduce using rule 30 (np_prepare_class -> .)

    np_prepare_class               shift and go to state 21

state 15

    (10) vars -> VAR np_create_var_table . var_type
    (13) var_type -> . compound ; more_var_types
    (14) var_type -> . simple ; more_var_types
    (21) compound -> . type ID [ CTE_INT two_dim ] more_arr_ids
    (22) compound -> . CLASS_ID np_class_id ID np_save_id moreids
    (17) simple -> . type ID np_save_id moreids
    (50) type -> . CHAR
    (51) type -> . FLOAT
    (52) type -> . INT
    CLASS_ID        shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29

    var_type                       shift and go to state 22
    compound                       shift and go to state 23
    simple                         shift and go to state 24
    type                           shift and go to state 25

state 16

    (1) program -> PROGRAM np_create_global_symTable ID np_program_record ; opt_vars opt_classes opt_funcs . main end
    (146) main -> . MAIN np_save_main_id ( ) opt_vars { body } np_exit_scope
    MAIN            shift and go to state 31

    main                           shift and go to state 30

state 17

    (8) opt_funcs -> eps .
    (37) functions -> eps .
  ! reduce/reduce conflict for MAIN resolved using rule 8 (opt_funcs -> eps .)
    MAIN            reduce using rule 8 (opt_funcs -> eps .)


state 18

    (9) opt_funcs -> functions .
    MAIN            reduce using rule 9 (opt_funcs -> functions .)


state 19

    (38) functions -> function .
    MAIN            reduce using rule 38 (functions -> function .)
    }               reduce using rule 38 (functions -> function .)


state 20

    (39) function -> FUNC . func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions
    (42) func_types -> . VOID
    (43) func_types -> . type
    (50) type -> . CHAR
    (51) type -> . FLOAT
    (52) type -> . INT
    VOID            shift and go to state 33
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29

    func_types                     shift and go to state 32
    type                           shift and go to state 34

state 21

    (29) classes -> CLASS np_prepare_class . CLASS_ID np_save_func_id opt_derivation { opt_vars opt_methods } np_exit_scope classes
    CLASS_ID        shift and go to state 35


state 22

    (10) vars -> VAR np_create_var_table var_type .
    CLASS           reduce using rule 10 (vars -> VAR np_create_var_table var_type .)
    FUNC            reduce using rule 10 (vars -> VAR np_create_var_table var_type .)
    MAIN            reduce using rule 10 (vars -> VAR np_create_var_table var_type .)
    {               reduce using rule 10 (vars -> VAR np_create_var_table var_type .)
    METHODS         reduce using rule 10 (vars -> VAR np_create_var_table var_type .)
    }               reduce using rule 10 (vars -> VAR np_create_var_table var_type .)


state 23

    (13) var_type -> compound . ; more_var_types
    ;               shift and go to state 36


state 24

    (14) var_type -> simple . ; more_var_types
    ;               shift and go to state 37


state 25

    (21) compound -> type . ID [ CTE_INT two_dim ] more_arr_ids
    (17) simple -> type . ID np_save_id moreids
    ID              shift and go to state 38


state 26

    (22) compound -> CLASS_ID . np_class_id ID np_save_id moreids
    (23) np_class_id -> .
    ID              reduce using rule 23 (np_class_id -> .)

    np_class_id                    shift and go to state 39

state 27

    (50) type -> CHAR .
    ID              reduce using rule 50 (type -> CHAR .)


state 28

    (51) type -> FLOAT .
    ID              reduce using rule 51 (type -> FLOAT .)


state 29

    (52) type -> INT .
    ID              reduce using rule 52 (type -> INT .)


state 30

    (1) program -> PROGRAM np_create_global_symTable ID np_program_record ; opt_vars opt_classes opt_funcs main . end
    (148) end -> .
    $end            reduce using rule 148 (end -> .)

    end                            shift and go to state 40

state 31

    (146) main -> MAIN . np_save_main_id ( ) opt_vars { body } np_exit_scope
    (147) np_save_main_id -> .
    (               reduce using rule 147 (np_save_main_id -> .)

    np_save_main_id                shift and go to state 41

state 32

    (39) function -> FUNC func_types . ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions
    ID              shift and go to state 42


state 33

    (42) func_types -> VOID .
    ID              reduce using rule 42 (func_types -> VOID .)


state 34

    (43) func_types -> type .
    ID              reduce using rule 43 (func_types -> type .)


state 35

    (29) classes -> CLASS np_prepare_class CLASS_ID . np_save_func_id opt_derivation { opt_vars opt_methods } np_exit_scope classes
    (40) np_save_func_id -> .
    DERIVES         reduce using rule 40 (np_save_func_id -> .)
    {               reduce using rule 40 (np_save_func_id -> .)

    np_save_func_id                shift and go to state 43

state 36

    (13) var_type -> compound ; . more_var_types
    (15) more_var_types -> . eps
    (16) more_var_types -> . var_type
    (149) eps -> .
    (13) var_type -> . compound ; more_var_types
    (14) var_type -> . simple ; more_var_types
    (21) compound -> . type ID [ CTE_INT two_dim ] more_arr_ids
    (22) compound -> . CLASS_ID np_class_id ID np_save_id moreids
    (17) simple -> . type ID np_save_id moreids
    (50) type -> . CHAR
    (51) type -> . FLOAT
    (52) type -> . INT
    CLASS           reduce using rule 149 (eps -> .)
    FUNC            reduce using rule 149 (eps -> .)
    MAIN            reduce using rule 149 (eps -> .)
    {               reduce using rule 149 (eps -> .)
    METHODS         reduce using rule 149 (eps -> .)
    }               reduce using rule 149 (eps -> .)
    CLASS_ID        shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29

    compound                       shift and go to state 23
    more_var_types                 shift and go to state 44
    eps                            shift and go to state 45
    var_type                       shift and go to state 46
    simple                         shift and go to state 24
    type                           shift and go to state 25

state 37

    (14) var_type -> simple ; . more_var_types
    (15) more_var_types -> . eps
    (16) more_var_types -> . var_type
    (149) eps -> .
    (13) var_type -> . compound ; more_var_types
    (14) var_type -> . simple ; more_var_types
    (21) compound -> . type ID [ CTE_INT two_dim ] more_arr_ids
    (22) compound -> . CLASS_ID np_class_id ID np_save_id moreids
    (17) simple -> . type ID np_save_id moreids
    (50) type -> . CHAR
    (51) type -> . FLOAT
    (52) type -> . INT
    CLASS           reduce using rule 149 (eps -> .)
    FUNC            reduce using rule 149 (eps -> .)
    MAIN            reduce using rule 149 (eps -> .)
    {               reduce using rule 149 (eps -> .)
    METHODS         reduce using rule 149 (eps -> .)
    }               reduce using rule 149 (eps -> .)
    CLASS_ID        shift and go to state 26
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29

    simple                         shift and go to state 24
    more_var_types                 shift and go to state 47
    eps                            shift and go to state 45
    var_type                       shift and go to state 46
    compound                       shift and go to state 23
    type                           shift and go to state 25

state 38

    (21) compound -> type ID . [ CTE_INT two_dim ] more_arr_ids
    (17) simple -> type ID . np_save_id moreids
    (18) np_save_id -> .
    [               shift and go to state 48
    ,               reduce using rule 18 (np_save_id -> .)
    ;               reduce using rule 18 (np_save_id -> .)

    np_save_id                     shift and go to state 49

state 39

    (22) compound -> CLASS_ID np_class_id . ID np_save_id moreids
    ID              shift and go to state 50


state 40

    (1) program -> PROGRAM np_create_global_symTable ID np_program_record ; opt_vars opt_classes opt_funcs main end .
    $end            reduce using rule 1 (program -> PROGRAM np_create_global_symTable ID np_program_record ; opt_vars opt_classes opt_funcs main end .)


state 41

    (146) main -> MAIN np_save_main_id . ( ) opt_vars { body } np_exit_scope
    (               shift and go to state 51


state 42

    (39) function -> FUNC func_types ID . np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions
    (40) np_save_func_id -> .
    (               reduce using rule 40 (np_save_func_id -> .)

    np_save_func_id                shift and go to state 52

state 43

    (29) classes -> CLASS np_prepare_class CLASS_ID np_save_func_id . opt_derivation { opt_vars opt_methods } np_exit_scope classes
    (31) opt_derivation -> . eps
    (32) opt_derivation -> . DERIVES CLASS_ID np_copy_class_record
    (149) eps -> .
    DERIVES         shift and go to state 55
    {               reduce using rule 149 (eps -> .)

    opt_derivation                 shift and go to state 53
    eps                            shift and go to state 54

state 44

    (13) var_type -> compound ; more_var_types .
    CLASS           reduce using rule 13 (var_type -> compound ; more_var_types .)
    FUNC            reduce using rule 13 (var_type -> compound ; more_var_types .)
    MAIN            reduce using rule 13 (var_type -> compound ; more_var_types .)
    {               reduce using rule 13 (var_type -> compound ; more_var_types .)
    METHODS         reduce using rule 13 (var_type -> compound ; more_var_types .)
    }               reduce using rule 13 (var_type -> compound ; more_var_types .)


state 45

    (15) more_var_types -> eps .
    CLASS           reduce using rule 15 (more_var_types -> eps .)
    FUNC            reduce using rule 15 (more_var_types -> eps .)
    MAIN            reduce using rule 15 (more_var_types -> eps .)
    {               reduce using rule 15 (more_var_types -> eps .)
    METHODS         reduce using rule 15 (more_var_types -> eps .)
    }               reduce using rule 15 (more_var_types -> eps .)


state 46

    (16) more_var_types -> var_type .
    CLASS           reduce using rule 16 (more_var_types -> var_type .)
    FUNC            reduce using rule 16 (more_var_types -> var_type .)
    MAIN            reduce using rule 16 (more_var_types -> var_type .)
    {               reduce using rule 16 (more_var_types -> var_type .)
    METHODS         reduce using rule 16 (more_var_types -> var_type .)
    }               reduce using rule 16 (more_var_types -> var_type .)


state 47

    (14) var_type -> simple ; more_var_types .
    CLASS           reduce using rule 14 (var_type -> simple ; more_var_types .)
    FUNC            reduce using rule 14 (var_type -> simple ; more_var_types .)
    MAIN            reduce using rule 14 (var_type -> simple ; more_var_types .)
    {               reduce using rule 14 (var_type -> simple ; more_var_types .)
    METHODS         reduce using rule 14 (var_type -> simple ; more_var_types .)
    }               reduce using rule 14 (var_type -> simple ; more_var_types .)


state 48

    (21) compound -> type ID [ . CTE_INT two_dim ] more_arr_ids
    CTE_INT         shift and go to state 56


state 49

    (17) simple -> type ID np_save_id . moreids
    (19) moreids -> . eps
    (20) moreids -> . , ID np_save_id moreids
    (149) eps -> .
    ,               shift and go to state 59
    ;               reduce using rule 149 (eps -> .)

    moreids                        shift and go to state 57
    eps                            shift and go to state 58

state 50

    (22) compound -> CLASS_ID np_class_id ID . np_save_id moreids
    (18) np_save_id -> .
    ,               reduce using rule 18 (np_save_id -> .)
    ;               reduce using rule 18 (np_save_id -> .)

    np_save_id                     shift and go to state 60

state 51

    (146) main -> MAIN np_save_main_id ( . ) opt_vars { body } np_exit_scope
    )               shift and go to state 61


state 52

    (39) function -> FUNC func_types ID np_save_func_id . ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions
    (               shift and go to state 62


state 53

    (29) classes -> CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation . { opt_vars opt_methods } np_exit_scope classes
    {               shift and go to state 63


state 54

    (31) opt_derivation -> eps .
    {               reduce using rule 31 (opt_derivation -> eps .)


state 55

    (32) opt_derivation -> DERIVES . CLASS_ID np_copy_class_record
    CLASS_ID        shift and go to state 64


state 56

    (21) compound -> type ID [ CTE_INT . two_dim ] more_arr_ids
    (26) two_dim -> . eps
    (27) two_dim -> . , CTE_INT
    (149) eps -> .
    ,               shift and go to state 67
    ]               reduce using rule 149 (eps -> .)

    two_dim                        shift and go to state 65
    eps                            shift and go to state 66

state 57

    (17) simple -> type ID np_save_id moreids .
    ;               reduce using rule 17 (simple -> type ID np_save_id moreids .)


state 58

    (19) moreids -> eps .
    ;               reduce using rule 19 (moreids -> eps .)


state 59

    (20) moreids -> , . ID np_save_id moreids
    ID              shift and go to state 68


state 60

    (22) compound -> CLASS_ID np_class_id ID np_save_id . moreids
    (19) moreids -> . eps
    (20) moreids -> . , ID np_save_id moreids
    (149) eps -> .
    ,               shift and go to state 59
    ;               reduce using rule 149 (eps -> .)

    moreids                        shift and go to state 69
    eps                            shift and go to state 58

state 61

    (146) main -> MAIN np_save_main_id ( ) . opt_vars { body } np_exit_scope
    (4) opt_vars -> . eps
    (5) opt_vars -> . vars
    (149) eps -> .
    (10) vars -> . VAR np_create_var_table var_type
    {               reduce using rule 149 (eps -> .)
    VAR             shift and go to state 10

    opt_vars                       shift and go to state 70
    eps                            shift and go to state 8
    vars                           shift and go to state 9

state 62

    (39) function -> FUNC func_types ID np_save_func_id ( . np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions
    (11) np_create_var_table -> .
    CHAR            reduce using rule 11 (np_create_var_table -> .)
    FLOAT           reduce using rule 11 (np_create_var_table -> .)
    INT             reduce using rule 11 (np_create_var_table -> .)
    )               reduce using rule 11 (np_create_var_table -> .)

    np_create_var_table            shift and go to state 71

state 63

    (29) classes -> CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation { . opt_vars opt_methods } np_exit_scope classes
    (4) opt_vars -> . eps
    (5) opt_vars -> . vars
    (149) eps -> .
    (10) vars -> . VAR np_create_var_table var_type
    METHODS         reduce using rule 149 (eps -> .)
    }               reduce using rule 149 (eps -> .)
    VAR             shift and go to state 10

    opt_vars                       shift and go to state 72
    eps                            shift and go to state 8
    vars                           shift and go to state 9

state 64

    (32) opt_derivation -> DERIVES CLASS_ID . np_copy_class_record
    (33) np_copy_class_record -> .
    {               reduce using rule 33 (np_copy_class_record -> .)

    np_copy_class_record           shift and go to state 73

state 65

    (21) compound -> type ID [ CTE_INT two_dim . ] more_arr_ids
    ]               shift and go to state 74


state 66

    (26) two_dim -> eps .
    ]               reduce using rule 26 (two_dim -> eps .)


state 67

    (27) two_dim -> , . CTE_INT
    CTE_INT         shift and go to state 75


state 68

    (20) moreids -> , ID . np_save_id moreids
    (18) np_save_id -> .
    ,               reduce using rule 18 (np_save_id -> .)
    ;               reduce using rule 18 (np_save_id -> .)

    np_save_id                     shift and go to state 76

state 69

    (22) compound -> CLASS_ID np_class_id ID np_save_id moreids .
    ;               reduce using rule 22 (compound -> CLASS_ID np_class_id ID np_save_id moreids .)


state 70

    (146) main -> MAIN np_save_main_id ( ) opt_vars . { body } np_exit_scope
    {               shift and go to state 77


state 71

    (39) function -> FUNC func_types ID np_save_func_id ( np_create_var_table . opt_param ) opt_vars { body } np_endfunc np_exit_scope functions
    (44) opt_param -> . eps
    (45) opt_param -> . param
    (149) eps -> .
    (48) param -> . type ID np_save_id np_save_param moreparams
    (50) type -> . CHAR
    (51) type -> . FLOAT
    (52) type -> . INT
    )               reduce using rule 149 (eps -> .)
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29

    opt_param                      shift and go to state 78
    eps                            shift and go to state 79
    param                          shift and go to state 80
    type                           shift and go to state 81

state 72

    (29) classes -> CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation { opt_vars . opt_methods } np_exit_scope classes
    (34) opt_methods -> . eps
    (35) opt_methods -> . methods
    (149) eps -> .
    (36) methods -> . METHODS : functions
    }               reduce using rule 149 (eps -> .)
    METHODS         shift and go to state 85

    opt_methods                    shift and go to state 82
    eps                            shift and go to state 83
    methods                        shift and go to state 84

state 73

    (32) opt_derivation -> DERIVES CLASS_ID np_copy_class_record .
    {               reduce using rule 32 (opt_derivation -> DERIVES CLASS_ID np_copy_class_record .)


state 74

    (21) compound -> type ID [ CTE_INT two_dim ] . more_arr_ids
    (24) more_arr_ids -> . eps
    (25) more_arr_ids -> . , ID np_save_id [ CTE_INT two_dim ] more_arr_ids
    (149) eps -> .
    ,               shift and go to state 88
    ;               reduce using rule 149 (eps -> .)

    more_arr_ids                   shift and go to state 86
    eps                            shift and go to state 87

state 75

    (27) two_dim -> , CTE_INT .
    ]               reduce using rule 27 (two_dim -> , CTE_INT .)


state 76

    (20) moreids -> , ID np_save_id . moreids
    (19) moreids -> . eps
    (20) moreids -> . , ID np_save_id moreids
    (149) eps -> .
    ,               shift and go to state 59
    ;               reduce using rule 149 (eps -> .)

    moreids                        shift and go to state 89
    eps                            shift and go to state 58

state 77

    (146) main -> MAIN np_save_main_id ( ) opt_vars { . body } np_exit_scope
    (53) body -> . opt_stmts
    (54) opt_stmts -> . eps
    (55) opt_stmts -> . statements opt_stmts
    (149) eps -> .
    (56) statements -> . function_return
    (57) statements -> . call_func
    (58) statements -> . cycles
    (59) statements -> . conditional
    (60) statements -> . assign
    (61) statements -> . read
    (62) statements -> . print
    (101) function_return -> . RETURN ( expression ) ;
    (89) call_func -> . call_func_body ;
    (82) cycles -> . while_loop
    (83) cycles -> . for_loop
    (76) conditional -> . IF ( expression ) np_if { body } opt_else np_end_if
    (74) assign -> . variable = np_push_operator expression ; np_check_assignment_operator
    (69) read -> . READ ( r_args ) ;
    (63) print -> . PRINT ( p_args ) ;
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (85) while_loop -> . WHILE np_cycle_start ( expression ) np_while { body } np_while_return
    (84) for_loop -> . FOR ( ID = expression TO expression ) { body }
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    }               reduce using rule 149 (eps -> .)
    RETURN          shift and go to state 101
    IF              shift and go to state 105
    READ            shift and go to state 107
    PRINT           shift and go to state 108
    ID              shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111

    body                           shift and go to state 90
    opt_stmts                      shift and go to state 91
    eps                            shift and go to state 92
    statements                     shift and go to state 93
    function_return                shift and go to state 94
    call_func                      shift and go to state 95
    cycles                         shift and go to state 96
    conditional                    shift and go to state 97
    assign                         shift and go to state 98
    read                           shift and go to state 99
    print                          shift and go to state 100
    call_func_body                 shift and go to state 102
    while_loop                     shift and go to state 103
    for_loop                       shift and go to state 104
    variable                       shift and go to state 106

state 78

    (39) function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param . ) opt_vars { body } np_endfunc np_exit_scope functions
    )               shift and go to state 112


state 79

    (44) opt_param -> eps .
    )               reduce using rule 44 (opt_param -> eps .)
    CHAR            reduce using rule 44 (opt_param -> eps .)
    FLOAT           reduce using rule 44 (opt_param -> eps .)
    INT             reduce using rule 44 (opt_param -> eps .)


state 80

    (45) opt_param -> param .
    )               reduce using rule 45 (opt_param -> param .)
    CHAR            reduce using rule 45 (opt_param -> param .)
    FLOAT           reduce using rule 45 (opt_param -> param .)
    INT             reduce using rule 45 (opt_param -> param .)


state 81

    (48) param -> type . ID np_save_id np_save_param moreparams
    ID              shift and go to state 113


state 82

    (29) classes -> CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation { opt_vars opt_methods . } np_exit_scope classes
    }               shift and go to state 114


state 83

    (34) opt_methods -> eps .
    }               reduce using rule 34 (opt_methods -> eps .)


state 84

    (35) opt_methods -> methods .
    }               reduce using rule 35 (opt_methods -> methods .)


state 85

    (36) methods -> METHODS . : functions
    :               shift and go to state 115


state 86

    (21) compound -> type ID [ CTE_INT two_dim ] more_arr_ids .
    ;               reduce using rule 21 (compound -> type ID [ CTE_INT two_dim ] more_arr_ids .)


state 87

    (24) more_arr_ids -> eps .
    ;               reduce using rule 24 (more_arr_ids -> eps .)


state 88

    (25) more_arr_ids -> , . ID np_save_id [ CTE_INT two_dim ] more_arr_ids
    ID              shift and go to state 116


state 89

    (20) moreids -> , ID np_save_id moreids .
    ;               reduce using rule 20 (moreids -> , ID np_save_id moreids .)


state 90

    (146) main -> MAIN np_save_main_id ( ) opt_vars { body . } np_exit_scope
    }               shift and go to state 117


state 91

    (53) body -> opt_stmts .
    }               reduce using rule 53 (body -> opt_stmts .)


state 92

    (54) opt_stmts -> eps .
    }               reduce using rule 54 (opt_stmts -> eps .)


state 93

    (55) opt_stmts -> statements . opt_stmts
    (54) opt_stmts -> . eps
    (55) opt_stmts -> . statements opt_stmts
    (149) eps -> .
    (56) statements -> . function_return
    (57) statements -> . call_func
    (58) statements -> . cycles
    (59) statements -> . conditional
    (60) statements -> . assign
    (61) statements -> . read
    (62) statements -> . print
    (101) function_return -> . RETURN ( expression ) ;
    (89) call_func -> . call_func_body ;
    (82) cycles -> . while_loop
    (83) cycles -> . for_loop
    (76) conditional -> . IF ( expression ) np_if { body } opt_else np_end_if
    (74) assign -> . variable = np_push_operator expression ; np_check_assignment_operator
    (69) read -> . READ ( r_args ) ;
    (63) print -> . PRINT ( p_args ) ;
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (85) while_loop -> . WHILE np_cycle_start ( expression ) np_while { body } np_while_return
    (84) for_loop -> . FOR ( ID = expression TO expression ) { body }
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    }               reduce using rule 149 (eps -> .)
    RETURN          shift and go to state 101
    IF              shift and go to state 105
    READ            shift and go to state 107
    PRINT           shift and go to state 108
    ID              shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111

    statements                     shift and go to state 93
    opt_stmts                      shift and go to state 118
    eps                            shift and go to state 92
    function_return                shift and go to state 94
    call_func                      shift and go to state 95
    cycles                         shift and go to state 96
    conditional                    shift and go to state 97
    assign                         shift and go to state 98
    read                           shift and go to state 99
    print                          shift and go to state 100
    call_func_body                 shift and go to state 102
    while_loop                     shift and go to state 103
    for_loop                       shift and go to state 104
    variable                       shift and go to state 106

state 94

    (56) statements -> function_return .
    RETURN          reduce using rule 56 (statements -> function_return .)
    IF              reduce using rule 56 (statements -> function_return .)
    READ            reduce using rule 56 (statements -> function_return .)
    PRINT           reduce using rule 56 (statements -> function_return .)
    ID              reduce using rule 56 (statements -> function_return .)
    WHILE           reduce using rule 56 (statements -> function_return .)
    FOR             reduce using rule 56 (statements -> function_return .)
    }               reduce using rule 56 (statements -> function_return .)


state 95

    (57) statements -> call_func .
    RETURN          reduce using rule 57 (statements -> call_func .)
    IF              reduce using rule 57 (statements -> call_func .)
    READ            reduce using rule 57 (statements -> call_func .)
    PRINT           reduce using rule 57 (statements -> call_func .)
    ID              reduce using rule 57 (statements -> call_func .)
    WHILE           reduce using rule 57 (statements -> call_func .)
    FOR             reduce using rule 57 (statements -> call_func .)
    }               reduce using rule 57 (statements -> call_func .)


state 96

    (58) statements -> cycles .
    RETURN          reduce using rule 58 (statements -> cycles .)
    IF              reduce using rule 58 (statements -> cycles .)
    READ            reduce using rule 58 (statements -> cycles .)
    PRINT           reduce using rule 58 (statements -> cycles .)
    ID              reduce using rule 58 (statements -> cycles .)
    WHILE           reduce using rule 58 (statements -> cycles .)
    FOR             reduce using rule 58 (statements -> cycles .)
    }               reduce using rule 58 (statements -> cycles .)


state 97

    (59) statements -> conditional .
    RETURN          reduce using rule 59 (statements -> conditional .)
    IF              reduce using rule 59 (statements -> conditional .)
    READ            reduce using rule 59 (statements -> conditional .)
    PRINT           reduce using rule 59 (statements -> conditional .)
    ID              reduce using rule 59 (statements -> conditional .)
    WHILE           reduce using rule 59 (statements -> conditional .)
    FOR             reduce using rule 59 (statements -> conditional .)
    }               reduce using rule 59 (statements -> conditional .)


state 98

    (60) statements -> assign .
    RETURN          reduce using rule 60 (statements -> assign .)
    IF              reduce using rule 60 (statements -> assign .)
    READ            reduce using rule 60 (statements -> assign .)
    PRINT           reduce using rule 60 (statements -> assign .)
    ID              reduce using rule 60 (statements -> assign .)
    WHILE           reduce using rule 60 (statements -> assign .)
    FOR             reduce using rule 60 (statements -> assign .)
    }               reduce using rule 60 (statements -> assign .)


state 99

    (61) statements -> read .
    RETURN          reduce using rule 61 (statements -> read .)
    IF              reduce using rule 61 (statements -> read .)
    READ            reduce using rule 61 (statements -> read .)
    PRINT           reduce using rule 61 (statements -> read .)
    ID              reduce using rule 61 (statements -> read .)
    WHILE           reduce using rule 61 (statements -> read .)
    FOR             reduce using rule 61 (statements -> read .)
    }               reduce using rule 61 (statements -> read .)


state 100

    (62) statements -> print .
    RETURN          reduce using rule 62 (statements -> print .)
    IF              reduce using rule 62 (statements -> print .)
    READ            reduce using rule 62 (statements -> print .)
    PRINT           reduce using rule 62 (statements -> print .)
    ID              reduce using rule 62 (statements -> print .)
    WHILE           reduce using rule 62 (statements -> print .)
    FOR             reduce using rule 62 (statements -> print .)
    }               reduce using rule 62 (statements -> print .)


state 101

    (101) function_return -> RETURN . ( expression ) ;
    (               shift and go to state 119


state 102

    (89) call_func -> call_func_body . ;
    ;               shift and go to state 120


state 103

    (82) cycles -> while_loop .
    RETURN          reduce using rule 82 (cycles -> while_loop .)
    IF              reduce using rule 82 (cycles -> while_loop .)
    READ            reduce using rule 82 (cycles -> while_loop .)
    PRINT           reduce using rule 82 (cycles -> while_loop .)
    ID              reduce using rule 82 (cycles -> while_loop .)
    WHILE           reduce using rule 82 (cycles -> while_loop .)
    FOR             reduce using rule 82 (cycles -> while_loop .)
    }               reduce using rule 82 (cycles -> while_loop .)


state 104

    (83) cycles -> for_loop .
    RETURN          reduce using rule 83 (cycles -> for_loop .)
    IF              reduce using rule 83 (cycles -> for_loop .)
    READ            reduce using rule 83 (cycles -> for_loop .)
    PRINT           reduce using rule 83 (cycles -> for_loop .)
    ID              reduce using rule 83 (cycles -> for_loop .)
    WHILE           reduce using rule 83 (cycles -> for_loop .)
    FOR             reduce using rule 83 (cycles -> for_loop .)
    }               reduce using rule 83 (cycles -> for_loop .)


state 105

    (76) conditional -> IF . ( expression ) np_if { body } opt_else np_end_if
    (               shift and go to state 121


state 106

    (74) assign -> variable . = np_push_operator expression ; np_check_assignment_operator
    =               shift and go to state 122


state 107

    (69) read -> READ . ( r_args ) ;
    (               shift and go to state 123


state 108

    (63) print -> PRINT . ( p_args ) ;
    (               shift and go to state 124


state 109

    (90) call_func_body -> ID . opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> ID . opt_class_func opt_arr_call np_push_var_operand
    (91) opt_class_func -> . eps
    (92) opt_class_func -> . . ID
    (149) eps -> .
    .               shift and go to state 127
    [               reduce using rule 149 (eps -> .)
    (               reduce using rule 149 (eps -> .)
    =               reduce using rule 149 (eps -> .)
    /               reduce using rule 149 (eps -> .)
    *               reduce using rule 149 (eps -> .)
    -               reduce using rule 149 (eps -> .)
    +               reduce using rule 149 (eps -> .)
    EQUAL_TO        reduce using rule 149 (eps -> .)
    NOT_EQUAL_TO    reduce using rule 149 (eps -> .)
    LESS_OR_EQUAL_TO reduce using rule 149 (eps -> .)
    GREATER_OR_EQUAL_TO reduce using rule 149 (eps -> .)
    >               reduce using rule 149 (eps -> .)
    <               reduce using rule 149 (eps -> .)
    &               reduce using rule 149 (eps -> .)
    |               reduce using rule 149 (eps -> .)
    )               reduce using rule 149 (eps -> .)
    ,               reduce using rule 149 (eps -> .)
    ;               reduce using rule 149 (eps -> .)
    ]               reduce using rule 149 (eps -> .)
    TO              reduce using rule 149 (eps -> .)

    opt_class_func                 shift and go to state 125
    eps                            shift and go to state 126

state 110

    (85) while_loop -> WHILE . np_cycle_start ( expression ) np_while { body } np_while_return
    (86) np_cycle_start -> .
    (               reduce using rule 86 (np_cycle_start -> .)

    np_cycle_start                 shift and go to state 128

state 111

    (84) for_loop -> FOR . ( ID = expression TO expression ) { body }
    (               shift and go to state 129


state 112

    (39) function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) . opt_vars { body } np_endfunc np_exit_scope functions
    (4) opt_vars -> . eps
    (5) opt_vars -> . vars
    (149) eps -> .
    (10) vars -> . VAR np_create_var_table var_type
    {               reduce using rule 149 (eps -> .)
    VAR             shift and go to state 10

    opt_vars                       shift and go to state 130
    eps                            shift and go to state 8
    vars                           shift and go to state 9

state 113

    (48) param -> type ID . np_save_id np_save_param moreparams
    (18) np_save_id -> .
    ,               reduce using rule 18 (np_save_id -> .)
    )               reduce using rule 18 (np_save_id -> .)
    CHAR            reduce using rule 18 (np_save_id -> .)
    FLOAT           reduce using rule 18 (np_save_id -> .)
    INT             reduce using rule 18 (np_save_id -> .)

    np_save_id                     shift and go to state 131

state 114

    (29) classes -> CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation { opt_vars opt_methods } . np_exit_scope classes
    (12) np_exit_scope -> .
    CLASS           reduce using rule 12 (np_exit_scope -> .)
    FUNC            reduce using rule 12 (np_exit_scope -> .)
    MAIN            reduce using rule 12 (np_exit_scope -> .)

    np_exit_scope                  shift and go to state 132

state 115

    (36) methods -> METHODS : . functions
    (37) functions -> . eps
    (38) functions -> . function
    (149) eps -> .
    (39) function -> . FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions
    }               reduce using rule 149 (eps -> .)
    FUNC            shift and go to state 20

    functions                      shift and go to state 133
    eps                            shift and go to state 134
    function                       shift and go to state 19

state 116

    (25) more_arr_ids -> , ID . np_save_id [ CTE_INT two_dim ] more_arr_ids
    (18) np_save_id -> .
    [               reduce using rule 18 (np_save_id -> .)

    np_save_id                     shift and go to state 135

state 117

    (146) main -> MAIN np_save_main_id ( ) opt_vars { body } . np_exit_scope
    (12) np_exit_scope -> .
    $end            reduce using rule 12 (np_exit_scope -> .)

    np_exit_scope                  shift and go to state 136

state 118

    (55) opt_stmts -> statements opt_stmts .
    }               reduce using rule 55 (opt_stmts -> statements opt_stmts .)


state 119

    (101) function_return -> RETURN ( . expression ) ;
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    expression                     shift and go to state 138
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 120

    (89) call_func -> call_func_body ; .
    RETURN          reduce using rule 89 (call_func -> call_func_body ; .)
    IF              reduce using rule 89 (call_func -> call_func_body ; .)
    READ            reduce using rule 89 (call_func -> call_func_body ; .)
    PRINT           reduce using rule 89 (call_func -> call_func_body ; .)
    ID              reduce using rule 89 (call_func -> call_func_body ; .)
    WHILE           reduce using rule 89 (call_func -> call_func_body ; .)
    FOR             reduce using rule 89 (call_func -> call_func_body ; .)
    }               reduce using rule 89 (call_func -> call_func_body ; .)


state 121

    (76) conditional -> IF ( . expression ) np_if { body } opt_else np_end_if
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    expression                     shift and go to state 150
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 122

    (74) assign -> variable = . np_push_operator expression ; np_check_assignment_operator
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 151

state 123

    (69) read -> READ ( . r_args ) ;
    (70) r_args -> . variable np_create_read_quad more_r_args
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    ID              shift and go to state 154

    r_args                         shift and go to state 152
    variable                       shift and go to state 153

state 124

    (63) print -> PRINT ( . p_args ) ;
    (64) p_args -> . expression np_create_print_quad more_args
    (65) p_args -> . CTE_STRING np_create_print_quad more_args
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    CTE_STRING      shift and go to state 157
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    p_args                         shift and go to state 155
    expression                     shift and go to state 156
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 125

    (90) call_func_body -> ID opt_class_func . np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> ID opt_class_func . opt_arr_call np_push_var_operand
    (93) np_func_call -> .
    (104) opt_arr_call -> . eps
    (105) opt_arr_call -> . [ expression opt_dim_call ]
    (149) eps -> .
    (               reduce using rule 93 (np_func_call -> .)
    [               shift and go to state 161
    =               reduce using rule 149 (eps -> .)
    /               reduce using rule 149 (eps -> .)
    *               reduce using rule 149 (eps -> .)
    -               reduce using rule 149 (eps -> .)
    +               reduce using rule 149 (eps -> .)
    EQUAL_TO        reduce using rule 149 (eps -> .)
    NOT_EQUAL_TO    reduce using rule 149 (eps -> .)
    LESS_OR_EQUAL_TO reduce using rule 149 (eps -> .)
    GREATER_OR_EQUAL_TO reduce using rule 149 (eps -> .)
    >               reduce using rule 149 (eps -> .)
    <               reduce using rule 149 (eps -> .)
    &               reduce using rule 149 (eps -> .)
    |               reduce using rule 149 (eps -> .)
    )               reduce using rule 149 (eps -> .)
    ,               reduce using rule 149 (eps -> .)
    ;               reduce using rule 149 (eps -> .)
    ]               reduce using rule 149 (eps -> .)
    TO              reduce using rule 149 (eps -> .)

    np_func_call                   shift and go to state 158
    opt_arr_call                   shift and go to state 159
    eps                            shift and go to state 160

state 126

    (91) opt_class_func -> eps .
    [               reduce using rule 91 (opt_class_func -> eps .)
    (               reduce using rule 91 (opt_class_func -> eps .)
    =               reduce using rule 91 (opt_class_func -> eps .)
    /               reduce using rule 91 (opt_class_func -> eps .)
    *               reduce using rule 91 (opt_class_func -> eps .)
    -               reduce using rule 91 (opt_class_func -> eps .)
    +               reduce using rule 91 (opt_class_func -> eps .)
    EQUAL_TO        reduce using rule 91 (opt_class_func -> eps .)
    NOT_EQUAL_TO    reduce using rule 91 (opt_class_func -> eps .)
    LESS_OR_EQUAL_TO reduce using rule 91 (opt_class_func -> eps .)
    GREATER_OR_EQUAL_TO reduce using rule 91 (opt_class_func -> eps .)
    >               reduce using rule 91 (opt_class_func -> eps .)
    <               reduce using rule 91 (opt_class_func -> eps .)
    &               reduce using rule 91 (opt_class_func -> eps .)
    |               reduce using rule 91 (opt_class_func -> eps .)
    )               reduce using rule 91 (opt_class_func -> eps .)
    ,               reduce using rule 91 (opt_class_func -> eps .)
    ;               reduce using rule 91 (opt_class_func -> eps .)
    ]               reduce using rule 91 (opt_class_func -> eps .)
    TO              reduce using rule 91 (opt_class_func -> eps .)


state 127

    (92) opt_class_func -> . . ID
    ID              shift and go to state 162


state 128

    (85) while_loop -> WHILE np_cycle_start . ( expression ) np_while { body } np_while_return
    (               shift and go to state 163


state 129

    (84) for_loop -> FOR ( . ID = expression TO expression ) { body }
    ID              shift and go to state 164


state 130

    (39) function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars . { body } np_endfunc np_exit_scope functions
    {               shift and go to state 165


state 131

    (48) param -> type ID np_save_id . np_save_param moreparams
    (49) np_save_param -> .
    ,               reduce using rule 49 (np_save_param -> .)
    )               reduce using rule 49 (np_save_param -> .)
    CHAR            reduce using rule 49 (np_save_param -> .)
    FLOAT           reduce using rule 49 (np_save_param -> .)
    INT             reduce using rule 49 (np_save_param -> .)

    np_save_param                  shift and go to state 166

state 132

    (29) classes -> CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation { opt_vars opt_methods } np_exit_scope . classes
    (28) classes -> . eps
    (29) classes -> . CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation { opt_vars opt_methods } np_exit_scope classes
    (149) eps -> .
    CLASS           shift and go to state 14
    FUNC            reduce using rule 149 (eps -> .)
    MAIN            reduce using rule 149 (eps -> .)

    classes                        shift and go to state 167
    eps                            shift and go to state 168

state 133

    (36) methods -> METHODS : functions .
    }               reduce using rule 36 (methods -> METHODS : functions .)


state 134

    (37) functions -> eps .
    }               reduce using rule 37 (functions -> eps .)
    MAIN            reduce using rule 37 (functions -> eps .)


state 135

    (25) more_arr_ids -> , ID np_save_id . [ CTE_INT two_dim ] more_arr_ids
    [               shift and go to state 169


state 136

    (146) main -> MAIN np_save_main_id ( ) opt_vars { body } np_exit_scope .
    $end            reduce using rule 146 (main -> MAIN np_save_main_id ( ) opt_vars { body } np_exit_scope .)


state 137

    (140) f -> ( . np_add_fake_bottom expression ) np_rem_fake_bottom
    (141) np_add_fake_bottom -> .
    (               reduce using rule 141 (np_add_fake_bottom -> .)
    CTE_CHAR        reduce using rule 141 (np_add_fake_bottom -> .)
    CTE_FLOAT       reduce using rule 141 (np_add_fake_bottom -> .)
    CTE_INT         reduce using rule 141 (np_add_fake_bottom -> .)
    ID              reduce using rule 141 (np_add_fake_bottom -> .)

    np_add_fake_bottom             shift and go to state 170

state 138

    (101) function_return -> RETURN ( expression . ) ;
    )               shift and go to state 171


state 139

    (108) expression -> t_exp . np_check_or_operator exp_or
    (109) np_check_or_operator -> .
    |               reduce using rule 109 (np_check_or_operator -> .)
    )               reduce using rule 109 (np_check_or_operator -> .)
    ,               reduce using rule 109 (np_check_or_operator -> .)
    ;               reduce using rule 109 (np_check_or_operator -> .)
    ]               reduce using rule 109 (np_check_or_operator -> .)
    TO              reduce using rule 109 (np_check_or_operator -> .)

    np_check_or_operator           shift and go to state 172

state 140

    (114) t_exp -> g_exp . np_check_and_operator t_and
    (115) np_check_and_operator -> .
    &               reduce using rule 115 (np_check_and_operator -> .)
    |               reduce using rule 115 (np_check_and_operator -> .)
    )               reduce using rule 115 (np_check_and_operator -> .)
    ,               reduce using rule 115 (np_check_and_operator -> .)
    ;               reduce using rule 115 (np_check_and_operator -> .)
    ]               reduce using rule 115 (np_check_and_operator -> .)
    TO              reduce using rule 115 (np_check_and_operator -> .)

    np_check_and_operator          shift and go to state 173

state 141

    (118) g_exp -> m_exp . np_check_g_operator g_exp_opers
    (119) np_check_g_operator -> .
    EQUAL_TO        reduce using rule 119 (np_check_g_operator -> .)
    NOT_EQUAL_TO    reduce using rule 119 (np_check_g_operator -> .)
    LESS_OR_EQUAL_TO reduce using rule 119 (np_check_g_operator -> .)
    GREATER_OR_EQUAL_TO reduce using rule 119 (np_check_g_operator -> .)
    >               reduce using rule 119 (np_check_g_operator -> .)
    <               reduce using rule 119 (np_check_g_operator -> .)
    &               reduce using rule 119 (np_check_g_operator -> .)
    |               reduce using rule 119 (np_check_g_operator -> .)
    )               reduce using rule 119 (np_check_g_operator -> .)
    ,               reduce using rule 119 (np_check_g_operator -> .)
    ;               reduce using rule 119 (np_check_g_operator -> .)
    ]               reduce using rule 119 (np_check_g_operator -> .)
    TO              reduce using rule 119 (np_check_g_operator -> .)

    np_check_g_operator            shift and go to state 174

state 142

    (127) m_exp -> t . np_check_m_operator m_opers
    (128) np_check_m_operator -> .
    -               reduce using rule 128 (np_check_m_operator -> .)
    +               reduce using rule 128 (np_check_m_operator -> .)
    EQUAL_TO        reduce using rule 128 (np_check_m_operator -> .)
    NOT_EQUAL_TO    reduce using rule 128 (np_check_m_operator -> .)
    LESS_OR_EQUAL_TO reduce using rule 128 (np_check_m_operator -> .)
    GREATER_OR_EQUAL_TO reduce using rule 128 (np_check_m_operator -> .)
    >               reduce using rule 128 (np_check_m_operator -> .)
    <               reduce using rule 128 (np_check_m_operator -> .)
    &               reduce using rule 128 (np_check_m_operator -> .)
    |               reduce using rule 128 (np_check_m_operator -> .)
    )               reduce using rule 128 (np_check_m_operator -> .)
    ,               reduce using rule 128 (np_check_m_operator -> .)
    ;               reduce using rule 128 (np_check_m_operator -> .)
    ]               reduce using rule 128 (np_check_m_operator -> .)
    TO              reduce using rule 128 (np_check_m_operator -> .)

    np_check_m_operator            shift and go to state 175

state 143

    (132) t -> f . np_check_t_operator t_opers
    (133) np_check_t_operator -> .
    /               reduce using rule 133 (np_check_t_operator -> .)
    *               reduce using rule 133 (np_check_t_operator -> .)
    -               reduce using rule 133 (np_check_t_operator -> .)
    +               reduce using rule 133 (np_check_t_operator -> .)
    EQUAL_TO        reduce using rule 133 (np_check_t_operator -> .)
    NOT_EQUAL_TO    reduce using rule 133 (np_check_t_operator -> .)
    LESS_OR_EQUAL_TO reduce using rule 133 (np_check_t_operator -> .)
    GREATER_OR_EQUAL_TO reduce using rule 133 (np_check_t_operator -> .)
    >               reduce using rule 133 (np_check_t_operator -> .)
    <               reduce using rule 133 (np_check_t_operator -> .)
    &               reduce using rule 133 (np_check_t_operator -> .)
    |               reduce using rule 133 (np_check_t_operator -> .)
    )               reduce using rule 133 (np_check_t_operator -> .)
    ,               reduce using rule 133 (np_check_t_operator -> .)
    ;               reduce using rule 133 (np_check_t_operator -> .)
    ]               reduce using rule 133 (np_check_t_operator -> .)
    TO              reduce using rule 133 (np_check_t_operator -> .)

    np_check_t_operator            shift and go to state 176

state 144

    (137) f -> var_cte .
    /               reduce using rule 137 (f -> var_cte .)
    *               reduce using rule 137 (f -> var_cte .)
    -               reduce using rule 137 (f -> var_cte .)
    +               reduce using rule 137 (f -> var_cte .)
    EQUAL_TO        reduce using rule 137 (f -> var_cte .)
    NOT_EQUAL_TO    reduce using rule 137 (f -> var_cte .)
    LESS_OR_EQUAL_TO reduce using rule 137 (f -> var_cte .)
    GREATER_OR_EQUAL_TO reduce using rule 137 (f -> var_cte .)
    >               reduce using rule 137 (f -> var_cte .)
    <               reduce using rule 137 (f -> var_cte .)
    &               reduce using rule 137 (f -> var_cte .)
    |               reduce using rule 137 (f -> var_cte .)
    )               reduce using rule 137 (f -> var_cte .)
    ,               reduce using rule 137 (f -> var_cte .)
    ;               reduce using rule 137 (f -> var_cte .)
    ]               reduce using rule 137 (f -> var_cte .)
    TO              reduce using rule 137 (f -> var_cte .)


state 145

    (138) f -> call_func_body .
    /               reduce using rule 138 (f -> call_func_body .)
    *               reduce using rule 138 (f -> call_func_body .)
    -               reduce using rule 138 (f -> call_func_body .)
    +               reduce using rule 138 (f -> call_func_body .)
    EQUAL_TO        reduce using rule 138 (f -> call_func_body .)
    NOT_EQUAL_TO    reduce using rule 138 (f -> call_func_body .)
    LESS_OR_EQUAL_TO reduce using rule 138 (f -> call_func_body .)
    GREATER_OR_EQUAL_TO reduce using rule 138 (f -> call_func_body .)
    >               reduce using rule 138 (f -> call_func_body .)
    <               reduce using rule 138 (f -> call_func_body .)
    &               reduce using rule 138 (f -> call_func_body .)
    |               reduce using rule 138 (f -> call_func_body .)
    )               reduce using rule 138 (f -> call_func_body .)
    ,               reduce using rule 138 (f -> call_func_body .)
    ;               reduce using rule 138 (f -> call_func_body .)
    ]               reduce using rule 138 (f -> call_func_body .)
    TO              reduce using rule 138 (f -> call_func_body .)


state 146

    (139) f -> variable .
    /               reduce using rule 139 (f -> variable .)
    *               reduce using rule 139 (f -> variable .)
    -               reduce using rule 139 (f -> variable .)
    +               reduce using rule 139 (f -> variable .)
    EQUAL_TO        reduce using rule 139 (f -> variable .)
    NOT_EQUAL_TO    reduce using rule 139 (f -> variable .)
    LESS_OR_EQUAL_TO reduce using rule 139 (f -> variable .)
    GREATER_OR_EQUAL_TO reduce using rule 139 (f -> variable .)
    >               reduce using rule 139 (f -> variable .)
    <               reduce using rule 139 (f -> variable .)
    &               reduce using rule 139 (f -> variable .)
    |               reduce using rule 139 (f -> variable .)
    )               reduce using rule 139 (f -> variable .)
    ,               reduce using rule 139 (f -> variable .)
    ;               reduce using rule 139 (f -> variable .)
    ]               reduce using rule 139 (f -> variable .)
    TO              reduce using rule 139 (f -> variable .)


state 147

    (143) var_cte -> CTE_CHAR .
    /               reduce using rule 143 (var_cte -> CTE_CHAR .)
    *               reduce using rule 143 (var_cte -> CTE_CHAR .)
    -               reduce using rule 143 (var_cte -> CTE_CHAR .)
    +               reduce using rule 143 (var_cte -> CTE_CHAR .)
    EQUAL_TO        reduce using rule 143 (var_cte -> CTE_CHAR .)
    NOT_EQUAL_TO    reduce using rule 143 (var_cte -> CTE_CHAR .)
    LESS_OR_EQUAL_TO reduce using rule 143 (var_cte -> CTE_CHAR .)
    GREATER_OR_EQUAL_TO reduce using rule 143 (var_cte -> CTE_CHAR .)
    >               reduce using rule 143 (var_cte -> CTE_CHAR .)
    <               reduce using rule 143 (var_cte -> CTE_CHAR .)
    &               reduce using rule 143 (var_cte -> CTE_CHAR .)
    |               reduce using rule 143 (var_cte -> CTE_CHAR .)
    )               reduce using rule 143 (var_cte -> CTE_CHAR .)
    ,               reduce using rule 143 (var_cte -> CTE_CHAR .)
    ;               reduce using rule 143 (var_cte -> CTE_CHAR .)
    ]               reduce using rule 143 (var_cte -> CTE_CHAR .)
    TO              reduce using rule 143 (var_cte -> CTE_CHAR .)


state 148

    (144) var_cte -> CTE_FLOAT .
    /               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    *               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    -               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    +               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    EQUAL_TO        reduce using rule 144 (var_cte -> CTE_FLOAT .)
    NOT_EQUAL_TO    reduce using rule 144 (var_cte -> CTE_FLOAT .)
    LESS_OR_EQUAL_TO reduce using rule 144 (var_cte -> CTE_FLOAT .)
    GREATER_OR_EQUAL_TO reduce using rule 144 (var_cte -> CTE_FLOAT .)
    >               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    <               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    &               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    |               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    )               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    ,               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    ;               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    ]               reduce using rule 144 (var_cte -> CTE_FLOAT .)
    TO              reduce using rule 144 (var_cte -> CTE_FLOAT .)


state 149

    (145) var_cte -> CTE_INT .
    /               reduce using rule 145 (var_cte -> CTE_INT .)
    *               reduce using rule 145 (var_cte -> CTE_INT .)
    -               reduce using rule 145 (var_cte -> CTE_INT .)
    +               reduce using rule 145 (var_cte -> CTE_INT .)
    EQUAL_TO        reduce using rule 145 (var_cte -> CTE_INT .)
    NOT_EQUAL_TO    reduce using rule 145 (var_cte -> CTE_INT .)
    LESS_OR_EQUAL_TO reduce using rule 145 (var_cte -> CTE_INT .)
    GREATER_OR_EQUAL_TO reduce using rule 145 (var_cte -> CTE_INT .)
    >               reduce using rule 145 (var_cte -> CTE_INT .)
    <               reduce using rule 145 (var_cte -> CTE_INT .)
    &               reduce using rule 145 (var_cte -> CTE_INT .)
    |               reduce using rule 145 (var_cte -> CTE_INT .)
    )               reduce using rule 145 (var_cte -> CTE_INT .)
    ,               reduce using rule 145 (var_cte -> CTE_INT .)
    ;               reduce using rule 145 (var_cte -> CTE_INT .)
    ]               reduce using rule 145 (var_cte -> CTE_INT .)
    TO              reduce using rule 145 (var_cte -> CTE_INT .)


state 150

    (76) conditional -> IF ( expression . ) np_if { body } opt_else np_end_if
    )               shift and go to state 177


state 151

    (74) assign -> variable = np_push_operator . expression ; np_check_assignment_operator
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    variable                       shift and go to state 146
    expression                     shift and go to state 178
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145

state 152

    (69) read -> READ ( r_args . ) ;
    )               shift and go to state 179


state 153

    (70) r_args -> variable . np_create_read_quad more_r_args
    (73) np_create_read_quad -> .
    ,               reduce using rule 73 (np_create_read_quad -> .)
    )               reduce using rule 73 (np_create_read_quad -> .)

    np_create_read_quad            shift and go to state 180

state 154

    (102) variable -> ID . opt_class_func opt_arr_call np_push_var_operand
    (91) opt_class_func -> . eps
    (92) opt_class_func -> . . ID
    (149) eps -> .
    .               shift and go to state 127
    [               reduce using rule 149 (eps -> .)
    ,               reduce using rule 149 (eps -> .)
    )               reduce using rule 149 (eps -> .)

    opt_class_func                 shift and go to state 181
    eps                            shift and go to state 126

state 155

    (63) print -> PRINT ( p_args . ) ;
    )               shift and go to state 182


state 156

    (64) p_args -> expression . np_create_print_quad more_args
    (66) np_create_print_quad -> .
    ,               reduce using rule 66 (np_create_print_quad -> .)
    )               reduce using rule 66 (np_create_print_quad -> .)

    np_create_print_quad           shift and go to state 183

state 157

    (65) p_args -> CTE_STRING . np_create_print_quad more_args
    (66) np_create_print_quad -> .
    ,               reduce using rule 66 (np_create_print_quad -> .)
    )               reduce using rule 66 (np_create_print_quad -> .)

    np_create_print_quad           shift and go to state 184

state 158

    (90) call_func_body -> ID opt_class_func np_func_call . ( np_func_ERA opt_call_params ) np_func_gosub
    (               shift and go to state 185


state 159

    (102) variable -> ID opt_class_func opt_arr_call . np_push_var_operand
    (103) np_push_var_operand -> .
    =               reduce using rule 103 (np_push_var_operand -> .)
    /               reduce using rule 103 (np_push_var_operand -> .)
    *               reduce using rule 103 (np_push_var_operand -> .)
    -               reduce using rule 103 (np_push_var_operand -> .)
    +               reduce using rule 103 (np_push_var_operand -> .)
    EQUAL_TO        reduce using rule 103 (np_push_var_operand -> .)
    NOT_EQUAL_TO    reduce using rule 103 (np_push_var_operand -> .)
    LESS_OR_EQUAL_TO reduce using rule 103 (np_push_var_operand -> .)
    GREATER_OR_EQUAL_TO reduce using rule 103 (np_push_var_operand -> .)
    >               reduce using rule 103 (np_push_var_operand -> .)
    <               reduce using rule 103 (np_push_var_operand -> .)
    &               reduce using rule 103 (np_push_var_operand -> .)
    |               reduce using rule 103 (np_push_var_operand -> .)
    )               reduce using rule 103 (np_push_var_operand -> .)
    ,               reduce using rule 103 (np_push_var_operand -> .)
    ;               reduce using rule 103 (np_push_var_operand -> .)
    ]               reduce using rule 103 (np_push_var_operand -> .)
    TO              reduce using rule 103 (np_push_var_operand -> .)

    np_push_var_operand            shift and go to state 186

state 160

    (104) opt_arr_call -> eps .
    =               reduce using rule 104 (opt_arr_call -> eps .)
    /               reduce using rule 104 (opt_arr_call -> eps .)
    *               reduce using rule 104 (opt_arr_call -> eps .)
    -               reduce using rule 104 (opt_arr_call -> eps .)
    +               reduce using rule 104 (opt_arr_call -> eps .)
    EQUAL_TO        reduce using rule 104 (opt_arr_call -> eps .)
    NOT_EQUAL_TO    reduce using rule 104 (opt_arr_call -> eps .)
    LESS_OR_EQUAL_TO reduce using rule 104 (opt_arr_call -> eps .)
    GREATER_OR_EQUAL_TO reduce using rule 104 (opt_arr_call -> eps .)
    >               reduce using rule 104 (opt_arr_call -> eps .)
    <               reduce using rule 104 (opt_arr_call -> eps .)
    &               reduce using rule 104 (opt_arr_call -> eps .)
    |               reduce using rule 104 (opt_arr_call -> eps .)
    )               reduce using rule 104 (opt_arr_call -> eps .)
    ,               reduce using rule 104 (opt_arr_call -> eps .)
    ;               reduce using rule 104 (opt_arr_call -> eps .)
    ]               reduce using rule 104 (opt_arr_call -> eps .)
    TO              reduce using rule 104 (opt_arr_call -> eps .)


state 161

    (105) opt_arr_call -> [ . expression opt_dim_call ]
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    expression                     shift and go to state 187
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 162

    (92) opt_class_func -> . ID .
    [               reduce using rule 92 (opt_class_func -> . ID .)
    (               reduce using rule 92 (opt_class_func -> . ID .)
    =               reduce using rule 92 (opt_class_func -> . ID .)
    /               reduce using rule 92 (opt_class_func -> . ID .)
    *               reduce using rule 92 (opt_class_func -> . ID .)
    -               reduce using rule 92 (opt_class_func -> . ID .)
    +               reduce using rule 92 (opt_class_func -> . ID .)
    EQUAL_TO        reduce using rule 92 (opt_class_func -> . ID .)
    NOT_EQUAL_TO    reduce using rule 92 (opt_class_func -> . ID .)
    LESS_OR_EQUAL_TO reduce using rule 92 (opt_class_func -> . ID .)
    GREATER_OR_EQUAL_TO reduce using rule 92 (opt_class_func -> . ID .)
    >               reduce using rule 92 (opt_class_func -> . ID .)
    <               reduce using rule 92 (opt_class_func -> . ID .)
    &               reduce using rule 92 (opt_class_func -> . ID .)
    |               reduce using rule 92 (opt_class_func -> . ID .)
    )               reduce using rule 92 (opt_class_func -> . ID .)
    ,               reduce using rule 92 (opt_class_func -> . ID .)
    ;               reduce using rule 92 (opt_class_func -> . ID .)
    ]               reduce using rule 92 (opt_class_func -> . ID .)
    TO              reduce using rule 92 (opt_class_func -> . ID .)


state 163

    (85) while_loop -> WHILE np_cycle_start ( . expression ) np_while { body } np_while_return
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    expression                     shift and go to state 188
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 164

    (84) for_loop -> FOR ( ID . = expression TO expression ) { body }
    =               shift and go to state 189


state 165

    (39) function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { . body } np_endfunc np_exit_scope functions
    (53) body -> . opt_stmts
    (54) opt_stmts -> . eps
    (55) opt_stmts -> . statements opt_stmts
    (149) eps -> .
    (56) statements -> . function_return
    (57) statements -> . call_func
    (58) statements -> . cycles
    (59) statements -> . conditional
    (60) statements -> . assign
    (61) statements -> . read
    (62) statements -> . print
    (101) function_return -> . RETURN ( expression ) ;
    (89) call_func -> . call_func_body ;
    (82) cycles -> . while_loop
    (83) cycles -> . for_loop
    (76) conditional -> . IF ( expression ) np_if { body } opt_else np_end_if
    (74) assign -> . variable = np_push_operator expression ; np_check_assignment_operator
    (69) read -> . READ ( r_args ) ;
    (63) print -> . PRINT ( p_args ) ;
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (85) while_loop -> . WHILE np_cycle_start ( expression ) np_while { body } np_while_return
    (84) for_loop -> . FOR ( ID = expression TO expression ) { body }
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    }               reduce using rule 149 (eps -> .)
    RETURN          shift and go to state 101
    IF              shift and go to state 105
    READ            shift and go to state 107
    PRINT           shift and go to state 108
    ID              shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111

    body                           shift and go to state 190
    opt_stmts                      shift and go to state 91
    eps                            shift and go to state 92
    statements                     shift and go to state 93
    function_return                shift and go to state 94
    call_func                      shift and go to state 95
    cycles                         shift and go to state 96
    conditional                    shift and go to state 97
    assign                         shift and go to state 98
    read                           shift and go to state 99
    print                          shift and go to state 100
    call_func_body                 shift and go to state 102
    while_loop                     shift and go to state 103
    for_loop                       shift and go to state 104
    variable                       shift and go to state 106

state 166

    (48) param -> type ID np_save_id np_save_param . moreparams
    (46) moreparams -> . eps
    (47) moreparams -> . , param opt_param
    (149) eps -> .
    ,               shift and go to state 193
    CHAR            reduce using rule 149 (eps -> .)
    FLOAT           reduce using rule 149 (eps -> .)
    INT             reduce using rule 149 (eps -> .)
    )               reduce using rule 149 (eps -> .)

    moreparams                     shift and go to state 191
    eps                            shift and go to state 192

state 167

    (29) classes -> CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation { opt_vars opt_methods } np_exit_scope classes .
    FUNC            reduce using rule 29 (classes -> CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation { opt_vars opt_methods } np_exit_scope classes .)
    MAIN            reduce using rule 29 (classes -> CLASS np_prepare_class CLASS_ID np_save_func_id opt_derivation { opt_vars opt_methods } np_exit_scope classes .)


state 168

    (28) classes -> eps .
    FUNC            reduce using rule 28 (classes -> eps .)
    MAIN            reduce using rule 28 (classes -> eps .)


state 169

    (25) more_arr_ids -> , ID np_save_id [ . CTE_INT two_dim ] more_arr_ids
    CTE_INT         shift and go to state 194


state 170

    (140) f -> ( np_add_fake_bottom . expression ) np_rem_fake_bottom
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    expression                     shift and go to state 195
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 171

    (101) function_return -> RETURN ( expression ) . ;
    ;               shift and go to state 196


state 172

    (108) expression -> t_exp np_check_or_operator . exp_or
    (110) exp_or -> . eps
    (111) exp_or -> . | np_push_operator expression
    (149) eps -> .
    |               shift and go to state 199
    )               reduce using rule 149 (eps -> .)
    ,               reduce using rule 149 (eps -> .)
    ;               reduce using rule 149 (eps -> .)
    ]               reduce using rule 149 (eps -> .)
    TO              reduce using rule 149 (eps -> .)

    exp_or                         shift and go to state 197
    eps                            shift and go to state 198

state 173

    (114) t_exp -> g_exp np_check_and_operator . t_and
    (116) t_and -> . eps
    (117) t_and -> . & np_push_operator t_exp
    (149) eps -> .
    &               shift and go to state 202
    |               reduce using rule 149 (eps -> .)
    )               reduce using rule 149 (eps -> .)
    ,               reduce using rule 149 (eps -> .)
    ;               reduce using rule 149 (eps -> .)
    ]               reduce using rule 149 (eps -> .)
    TO              reduce using rule 149 (eps -> .)

    t_and                          shift and go to state 200
    eps                            shift and go to state 201

state 174

    (118) g_exp -> m_exp np_check_g_operator . g_exp_opers
    (120) g_exp_opers -> . eps
    (121) g_exp_opers -> . EQUAL_TO np_push_operator g_exp
    (122) g_exp_opers -> . NOT_EQUAL_TO np_push_operator g_exp
    (123) g_exp_opers -> . LESS_OR_EQUAL_TO np_push_operator g_exp
    (124) g_exp_opers -> . GREATER_OR_EQUAL_TO np_push_operator g_exp
    (125) g_exp_opers -> . > np_push_operator g_exp
    (126) g_exp_opers -> . < np_push_operator g_exp
    (149) eps -> .
    EQUAL_TO        shift and go to state 205
    NOT_EQUAL_TO    shift and go to state 206
    LESS_OR_EQUAL_TO shift and go to state 207
    GREATER_OR_EQUAL_TO shift and go to state 208
    >               shift and go to state 209
    <               shift and go to state 210
    &               reduce using rule 149 (eps -> .)
    |               reduce using rule 149 (eps -> .)
    )               reduce using rule 149 (eps -> .)
    ,               reduce using rule 149 (eps -> .)
    ;               reduce using rule 149 (eps -> .)
    ]               reduce using rule 149 (eps -> .)
    TO              reduce using rule 149 (eps -> .)

    g_exp_opers                    shift and go to state 203
    eps                            shift and go to state 204

state 175

    (127) m_exp -> t np_check_m_operator . m_opers
    (129) m_opers -> . eps
    (130) m_opers -> . - np_push_operator m_exp
    (131) m_opers -> . + np_push_operator m_exp
    (149) eps -> .
    -               shift and go to state 213
    +               shift and go to state 214
    EQUAL_TO        reduce using rule 149 (eps -> .)
    NOT_EQUAL_TO    reduce using rule 149 (eps -> .)
    LESS_OR_EQUAL_TO reduce using rule 149 (eps -> .)
    GREATER_OR_EQUAL_TO reduce using rule 149 (eps -> .)
    >               reduce using rule 149 (eps -> .)
    <               reduce using rule 149 (eps -> .)
    &               reduce using rule 149 (eps -> .)
    |               reduce using rule 149 (eps -> .)
    )               reduce using rule 149 (eps -> .)
    ,               reduce using rule 149 (eps -> .)
    ;               reduce using rule 149 (eps -> .)
    ]               reduce using rule 149 (eps -> .)
    TO              reduce using rule 149 (eps -> .)

    m_opers                        shift and go to state 211
    eps                            shift and go to state 212

state 176

    (132) t -> f np_check_t_operator . t_opers
    (134) t_opers -> . eps
    (135) t_opers -> . / np_push_operator t
    (136) t_opers -> . * np_push_operator t
    (149) eps -> .
    /               shift and go to state 217
    *               shift and go to state 218
    -               reduce using rule 149 (eps -> .)
    +               reduce using rule 149 (eps -> .)
    EQUAL_TO        reduce using rule 149 (eps -> .)
    NOT_EQUAL_TO    reduce using rule 149 (eps -> .)
    LESS_OR_EQUAL_TO reduce using rule 149 (eps -> .)
    GREATER_OR_EQUAL_TO reduce using rule 149 (eps -> .)
    >               reduce using rule 149 (eps -> .)
    <               reduce using rule 149 (eps -> .)
    &               reduce using rule 149 (eps -> .)
    |               reduce using rule 149 (eps -> .)
    )               reduce using rule 149 (eps -> .)
    ,               reduce using rule 149 (eps -> .)
    ;               reduce using rule 149 (eps -> .)
    ]               reduce using rule 149 (eps -> .)
    TO              reduce using rule 149 (eps -> .)

    t_opers                        shift and go to state 215
    eps                            shift and go to state 216

state 177

    (76) conditional -> IF ( expression ) . np_if { body } opt_else np_end_if
    (77) np_if -> .
    {               reduce using rule 77 (np_if -> .)

    np_if                          shift and go to state 219

state 178

    (74) assign -> variable = np_push_operator expression . ; np_check_assignment_operator
    ;               shift and go to state 220


state 179

    (69) read -> READ ( r_args ) . ;
    ;               shift and go to state 221


state 180

    (70) r_args -> variable np_create_read_quad . more_r_args
    (71) more_r_args -> . eps
    (72) more_r_args -> . , r_args
    (149) eps -> .
    ,               shift and go to state 224
    )               reduce using rule 149 (eps -> .)

    more_r_args                    shift and go to state 222
    eps                            shift and go to state 223

state 181

    (102) variable -> ID opt_class_func . opt_arr_call np_push_var_operand
    (104) opt_arr_call -> . eps
    (105) opt_arr_call -> . [ expression opt_dim_call ]
    (149) eps -> .
    [               shift and go to state 161
    ,               reduce using rule 149 (eps -> .)
    )               reduce using rule 149 (eps -> .)

    opt_arr_call                   shift and go to state 159
    eps                            shift and go to state 160

state 182

    (63) print -> PRINT ( p_args ) . ;
    ;               shift and go to state 225


state 183

    (64) p_args -> expression np_create_print_quad . more_args
    (67) more_args -> . eps
    (68) more_args -> . , p_args
    (149) eps -> .
    ,               shift and go to state 228
    )               reduce using rule 149 (eps -> .)

    more_args                      shift and go to state 226
    eps                            shift and go to state 227

state 184

    (65) p_args -> CTE_STRING np_create_print_quad . more_args
    (67) more_args -> . eps
    (68) more_args -> . , p_args
    (149) eps -> .
    ,               shift and go to state 228
    )               reduce using rule 149 (eps -> .)

    more_args                      shift and go to state 229
    eps                            shift and go to state 227

state 185

    (90) call_func_body -> ID opt_class_func np_func_call ( . np_func_ERA opt_call_params ) np_func_gosub
    (94) np_func_ERA -> .
    (               reduce using rule 94 (np_func_ERA -> .)
    CTE_CHAR        reduce using rule 94 (np_func_ERA -> .)
    CTE_FLOAT       reduce using rule 94 (np_func_ERA -> .)
    CTE_INT         reduce using rule 94 (np_func_ERA -> .)
    ID              reduce using rule 94 (np_func_ERA -> .)
    )               reduce using rule 94 (np_func_ERA -> .)

    np_func_ERA                    shift and go to state 230

state 186

    (102) variable -> ID opt_class_func opt_arr_call np_push_var_operand .
    =               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    /               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    *               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    -               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    +               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    EQUAL_TO        reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    NOT_EQUAL_TO    reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    LESS_OR_EQUAL_TO reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    GREATER_OR_EQUAL_TO reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    >               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    <               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    &               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    |               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    )               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    ,               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    ;               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    ]               reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)
    TO              reduce using rule 102 (variable -> ID opt_class_func opt_arr_call np_push_var_operand .)


state 187

    (105) opt_arr_call -> [ expression . opt_dim_call ]
    (106) opt_dim_call -> . eps
    (107) opt_dim_call -> . , expression
    (149) eps -> .
    ,               shift and go to state 233
    ]               reduce using rule 149 (eps -> .)

    opt_dim_call                   shift and go to state 231
    eps                            shift and go to state 232

state 188

    (85) while_loop -> WHILE np_cycle_start ( expression . ) np_while { body } np_while_return
    )               shift and go to state 234


state 189

    (84) for_loop -> FOR ( ID = . expression TO expression ) { body }
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    expression                     shift and go to state 235
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 190

    (39) function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body . } np_endfunc np_exit_scope functions
    }               shift and go to state 236


state 191

    (48) param -> type ID np_save_id np_save_param moreparams .
    )               reduce using rule 48 (param -> type ID np_save_id np_save_param moreparams .)
    CHAR            reduce using rule 48 (param -> type ID np_save_id np_save_param moreparams .)
    FLOAT           reduce using rule 48 (param -> type ID np_save_id np_save_param moreparams .)
    INT             reduce using rule 48 (param -> type ID np_save_id np_save_param moreparams .)


state 192

    (46) moreparams -> eps .
    CHAR            reduce using rule 46 (moreparams -> eps .)
    FLOAT           reduce using rule 46 (moreparams -> eps .)
    INT             reduce using rule 46 (moreparams -> eps .)
    )               reduce using rule 46 (moreparams -> eps .)


state 193

    (47) moreparams -> , . param opt_param
    (48) param -> . type ID np_save_id np_save_param moreparams
    (50) type -> . CHAR
    (51) type -> . FLOAT
    (52) type -> . INT
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29

    param                          shift and go to state 237
    type                           shift and go to state 81

state 194

    (25) more_arr_ids -> , ID np_save_id [ CTE_INT . two_dim ] more_arr_ids
    (26) two_dim -> . eps
    (27) two_dim -> . , CTE_INT
    (149) eps -> .
    ,               shift and go to state 67
    ]               reduce using rule 149 (eps -> .)

    two_dim                        shift and go to state 238
    eps                            shift and go to state 66

state 195

    (140) f -> ( np_add_fake_bottom expression . ) np_rem_fake_bottom
    )               shift and go to state 239


state 196

    (101) function_return -> RETURN ( expression ) ; .
    RETURN          reduce using rule 101 (function_return -> RETURN ( expression ) ; .)
    IF              reduce using rule 101 (function_return -> RETURN ( expression ) ; .)
    READ            reduce using rule 101 (function_return -> RETURN ( expression ) ; .)
    PRINT           reduce using rule 101 (function_return -> RETURN ( expression ) ; .)
    ID              reduce using rule 101 (function_return -> RETURN ( expression ) ; .)
    WHILE           reduce using rule 101 (function_return -> RETURN ( expression ) ; .)
    FOR             reduce using rule 101 (function_return -> RETURN ( expression ) ; .)
    }               reduce using rule 101 (function_return -> RETURN ( expression ) ; .)


state 197

    (108) expression -> t_exp np_check_or_operator exp_or .
    )               reduce using rule 108 (expression -> t_exp np_check_or_operator exp_or .)
    ,               reduce using rule 108 (expression -> t_exp np_check_or_operator exp_or .)
    ;               reduce using rule 108 (expression -> t_exp np_check_or_operator exp_or .)
    ]               reduce using rule 108 (expression -> t_exp np_check_or_operator exp_or .)
    TO              reduce using rule 108 (expression -> t_exp np_check_or_operator exp_or .)


state 198

    (110) exp_or -> eps .
    )               reduce using rule 110 (exp_or -> eps .)
    ,               reduce using rule 110 (exp_or -> eps .)
    ;               reduce using rule 110 (exp_or -> eps .)
    ]               reduce using rule 110 (exp_or -> eps .)
    TO              reduce using rule 110 (exp_or -> eps .)


state 199

    (111) exp_or -> | . np_push_operator expression
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 240

state 200

    (114) t_exp -> g_exp np_check_and_operator t_and .
    |               reduce using rule 114 (t_exp -> g_exp np_check_and_operator t_and .)
    )               reduce using rule 114 (t_exp -> g_exp np_check_and_operator t_and .)
    ,               reduce using rule 114 (t_exp -> g_exp np_check_and_operator t_and .)
    ;               reduce using rule 114 (t_exp -> g_exp np_check_and_operator t_and .)
    ]               reduce using rule 114 (t_exp -> g_exp np_check_and_operator t_and .)
    TO              reduce using rule 114 (t_exp -> g_exp np_check_and_operator t_and .)


state 201

    (116) t_and -> eps .
    |               reduce using rule 116 (t_and -> eps .)
    )               reduce using rule 116 (t_and -> eps .)
    ,               reduce using rule 116 (t_and -> eps .)
    ;               reduce using rule 116 (t_and -> eps .)
    ]               reduce using rule 116 (t_and -> eps .)
    TO              reduce using rule 116 (t_and -> eps .)


state 202

    (117) t_and -> & . np_push_operator t_exp
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 241

state 203

    (118) g_exp -> m_exp np_check_g_operator g_exp_opers .
    &               reduce using rule 118 (g_exp -> m_exp np_check_g_operator g_exp_opers .)
    |               reduce using rule 118 (g_exp -> m_exp np_check_g_operator g_exp_opers .)
    )               reduce using rule 118 (g_exp -> m_exp np_check_g_operator g_exp_opers .)
    ,               reduce using rule 118 (g_exp -> m_exp np_check_g_operator g_exp_opers .)
    ;               reduce using rule 118 (g_exp -> m_exp np_check_g_operator g_exp_opers .)
    ]               reduce using rule 118 (g_exp -> m_exp np_check_g_operator g_exp_opers .)
    TO              reduce using rule 118 (g_exp -> m_exp np_check_g_operator g_exp_opers .)


state 204

    (120) g_exp_opers -> eps .
    &               reduce using rule 120 (g_exp_opers -> eps .)
    |               reduce using rule 120 (g_exp_opers -> eps .)
    )               reduce using rule 120 (g_exp_opers -> eps .)
    ,               reduce using rule 120 (g_exp_opers -> eps .)
    ;               reduce using rule 120 (g_exp_opers -> eps .)
    ]               reduce using rule 120 (g_exp_opers -> eps .)
    TO              reduce using rule 120 (g_exp_opers -> eps .)


state 205

    (121) g_exp_opers -> EQUAL_TO . np_push_operator g_exp
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 242

state 206

    (122) g_exp_opers -> NOT_EQUAL_TO . np_push_operator g_exp
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 243

state 207

    (123) g_exp_opers -> LESS_OR_EQUAL_TO . np_push_operator g_exp
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 244

state 208

    (124) g_exp_opers -> GREATER_OR_EQUAL_TO . np_push_operator g_exp
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 245

state 209

    (125) g_exp_opers -> > . np_push_operator g_exp
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 246

state 210

    (126) g_exp_opers -> < . np_push_operator g_exp
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 247

state 211

    (127) m_exp -> t np_check_m_operator m_opers .
    EQUAL_TO        reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    NOT_EQUAL_TO    reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    LESS_OR_EQUAL_TO reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    GREATER_OR_EQUAL_TO reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    >               reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    <               reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    &               reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    |               reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    )               reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    ,               reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    ;               reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    ]               reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)
    TO              reduce using rule 127 (m_exp -> t np_check_m_operator m_opers .)


state 212

    (129) m_opers -> eps .
    EQUAL_TO        reduce using rule 129 (m_opers -> eps .)
    NOT_EQUAL_TO    reduce using rule 129 (m_opers -> eps .)
    LESS_OR_EQUAL_TO reduce using rule 129 (m_opers -> eps .)
    GREATER_OR_EQUAL_TO reduce using rule 129 (m_opers -> eps .)
    >               reduce using rule 129 (m_opers -> eps .)
    <               reduce using rule 129 (m_opers -> eps .)
    &               reduce using rule 129 (m_opers -> eps .)
    |               reduce using rule 129 (m_opers -> eps .)
    )               reduce using rule 129 (m_opers -> eps .)
    ,               reduce using rule 129 (m_opers -> eps .)
    ;               reduce using rule 129 (m_opers -> eps .)
    ]               reduce using rule 129 (m_opers -> eps .)
    TO              reduce using rule 129 (m_opers -> eps .)


state 213

    (130) m_opers -> - . np_push_operator m_exp
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 248

state 214

    (131) m_opers -> + . np_push_operator m_exp
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 249

state 215

    (132) t -> f np_check_t_operator t_opers .
    -               reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    +               reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    EQUAL_TO        reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    NOT_EQUAL_TO    reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    LESS_OR_EQUAL_TO reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    GREATER_OR_EQUAL_TO reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    >               reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    <               reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    &               reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    |               reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    )               reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    ,               reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    ;               reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    ]               reduce using rule 132 (t -> f np_check_t_operator t_opers .)
    TO              reduce using rule 132 (t -> f np_check_t_operator t_opers .)


state 216

    (134) t_opers -> eps .
    -               reduce using rule 134 (t_opers -> eps .)
    +               reduce using rule 134 (t_opers -> eps .)
    EQUAL_TO        reduce using rule 134 (t_opers -> eps .)
    NOT_EQUAL_TO    reduce using rule 134 (t_opers -> eps .)
    LESS_OR_EQUAL_TO reduce using rule 134 (t_opers -> eps .)
    GREATER_OR_EQUAL_TO reduce using rule 134 (t_opers -> eps .)
    >               reduce using rule 134 (t_opers -> eps .)
    <               reduce using rule 134 (t_opers -> eps .)
    &               reduce using rule 134 (t_opers -> eps .)
    |               reduce using rule 134 (t_opers -> eps .)
    )               reduce using rule 134 (t_opers -> eps .)
    ,               reduce using rule 134 (t_opers -> eps .)
    ;               reduce using rule 134 (t_opers -> eps .)
    ]               reduce using rule 134 (t_opers -> eps .)
    TO              reduce using rule 134 (t_opers -> eps .)


state 217

    (135) t_opers -> / . np_push_operator t
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 250

state 218

    (136) t_opers -> * . np_push_operator t
    (112) np_push_operator -> .
    (               reduce using rule 112 (np_push_operator -> .)
    CTE_CHAR        reduce using rule 112 (np_push_operator -> .)
    CTE_FLOAT       reduce using rule 112 (np_push_operator -> .)
    CTE_INT         reduce using rule 112 (np_push_operator -> .)
    ID              reduce using rule 112 (np_push_operator -> .)

    np_push_operator               shift and go to state 251

state 219

    (76) conditional -> IF ( expression ) np_if . { body } opt_else np_end_if
    {               shift and go to state 252


state 220

    (74) assign -> variable = np_push_operator expression ; . np_check_assignment_operator
    (75) np_check_assignment_operator -> .
    RETURN          reduce using rule 75 (np_check_assignment_operator -> .)
    IF              reduce using rule 75 (np_check_assignment_operator -> .)
    READ            reduce using rule 75 (np_check_assignment_operator -> .)
    PRINT           reduce using rule 75 (np_check_assignment_operator -> .)
    ID              reduce using rule 75 (np_check_assignment_operator -> .)
    WHILE           reduce using rule 75 (np_check_assignment_operator -> .)
    FOR             reduce using rule 75 (np_check_assignment_operator -> .)
    }               reduce using rule 75 (np_check_assignment_operator -> .)

    np_check_assignment_operator   shift and go to state 253

state 221

    (69) read -> READ ( r_args ) ; .
    RETURN          reduce using rule 69 (read -> READ ( r_args ) ; .)
    IF              reduce using rule 69 (read -> READ ( r_args ) ; .)
    READ            reduce using rule 69 (read -> READ ( r_args ) ; .)
    PRINT           reduce using rule 69 (read -> READ ( r_args ) ; .)
    ID              reduce using rule 69 (read -> READ ( r_args ) ; .)
    WHILE           reduce using rule 69 (read -> READ ( r_args ) ; .)
    FOR             reduce using rule 69 (read -> READ ( r_args ) ; .)
    }               reduce using rule 69 (read -> READ ( r_args ) ; .)


state 222

    (70) r_args -> variable np_create_read_quad more_r_args .
    )               reduce using rule 70 (r_args -> variable np_create_read_quad more_r_args .)


state 223

    (71) more_r_args -> eps .
    )               reduce using rule 71 (more_r_args -> eps .)


state 224

    (72) more_r_args -> , . r_args
    (70) r_args -> . variable np_create_read_quad more_r_args
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    ID              shift and go to state 154

    r_args                         shift and go to state 254
    variable                       shift and go to state 153

state 225

    (63) print -> PRINT ( p_args ) ; .
    RETURN          reduce using rule 63 (print -> PRINT ( p_args ) ; .)
    IF              reduce using rule 63 (print -> PRINT ( p_args ) ; .)
    READ            reduce using rule 63 (print -> PRINT ( p_args ) ; .)
    PRINT           reduce using rule 63 (print -> PRINT ( p_args ) ; .)
    ID              reduce using rule 63 (print -> PRINT ( p_args ) ; .)
    WHILE           reduce using rule 63 (print -> PRINT ( p_args ) ; .)
    FOR             reduce using rule 63 (print -> PRINT ( p_args ) ; .)
    }               reduce using rule 63 (print -> PRINT ( p_args ) ; .)


state 226

    (64) p_args -> expression np_create_print_quad more_args .
    )               reduce using rule 64 (p_args -> expression np_create_print_quad more_args .)


state 227

    (67) more_args -> eps .
    )               reduce using rule 67 (more_args -> eps .)


state 228

    (68) more_args -> , . p_args
    (64) p_args -> . expression np_create_print_quad more_args
    (65) p_args -> . CTE_STRING np_create_print_quad more_args
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    CTE_STRING      shift and go to state 157
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    p_args                         shift and go to state 255
    expression                     shift and go to state 156
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 229

    (65) p_args -> CTE_STRING np_create_print_quad more_args .
    )               reduce using rule 65 (p_args -> CTE_STRING np_create_print_quad more_args .)


state 230

    (90) call_func_body -> ID opt_class_func np_func_call ( np_func_ERA . opt_call_params ) np_func_gosub
    (96) opt_call_params -> . eps
    (97) opt_call_params -> . expression np_func_param more_expressions
    (149) eps -> .
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    )               reduce using rule 149 (eps -> .)
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    opt_call_params                shift and go to state 256
    eps                            shift and go to state 257
    expression                     shift and go to state 258
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 231

    (105) opt_arr_call -> [ expression opt_dim_call . ]
    ]               shift and go to state 259


state 232

    (106) opt_dim_call -> eps .
    ]               reduce using rule 106 (opt_dim_call -> eps .)


state 233

    (107) opt_dim_call -> , . expression
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    expression                     shift and go to state 260
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 234

    (85) while_loop -> WHILE np_cycle_start ( expression ) . np_while { body } np_while_return
    (87) np_while -> .
    {               reduce using rule 87 (np_while -> .)

    np_while                       shift and go to state 261

state 235

    (84) for_loop -> FOR ( ID = expression . TO expression ) { body }
    TO              shift and go to state 262


state 236

    (39) function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } . np_endfunc np_exit_scope functions
    (41) np_endfunc -> .
    FUNC            reduce using rule 41 (np_endfunc -> .)
    MAIN            reduce using rule 41 (np_endfunc -> .)
    }               reduce using rule 41 (np_endfunc -> .)

    np_endfunc                     shift and go to state 263

state 237

    (47) moreparams -> , param . opt_param
    (44) opt_param -> . eps
    (45) opt_param -> . param
    (149) eps -> .
    (48) param -> . type ID np_save_id np_save_param moreparams
    (50) type -> . CHAR
    (51) type -> . FLOAT
    (52) type -> . INT
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
    )               reduce using rule 149 (eps -> .)
    CHAR            shift and go to state 27
    FLOAT           shift and go to state 28
    INT             shift and go to state 29

    param                          shift and go to state 80
    opt_param                      shift and go to state 264
    eps                            shift and go to state 79
    type                           shift and go to state 81

state 238

    (25) more_arr_ids -> , ID np_save_id [ CTE_INT two_dim . ] more_arr_ids
    ]               shift and go to state 265


state 239

    (140) f -> ( np_add_fake_bottom expression ) . np_rem_fake_bottom
    (142) np_rem_fake_bottom -> .
    /               reduce using rule 142 (np_rem_fake_bottom -> .)
    *               reduce using rule 142 (np_rem_fake_bottom -> .)
    -               reduce using rule 142 (np_rem_fake_bottom -> .)
    +               reduce using rule 142 (np_rem_fake_bottom -> .)
    EQUAL_TO        reduce using rule 142 (np_rem_fake_bottom -> .)
    NOT_EQUAL_TO    reduce using rule 142 (np_rem_fake_bottom -> .)
    LESS_OR_EQUAL_TO reduce using rule 142 (np_rem_fake_bottom -> .)
    GREATER_OR_EQUAL_TO reduce using rule 142 (np_rem_fake_bottom -> .)
    >               reduce using rule 142 (np_rem_fake_bottom -> .)
    <               reduce using rule 142 (np_rem_fake_bottom -> .)
    &               reduce using rule 142 (np_rem_fake_bottom -> .)
    |               reduce using rule 142 (np_rem_fake_bottom -> .)
    )               reduce using rule 142 (np_rem_fake_bottom -> .)
    ,               reduce using rule 142 (np_rem_fake_bottom -> .)
    ;               reduce using rule 142 (np_rem_fake_bottom -> .)
    ]               reduce using rule 142 (np_rem_fake_bottom -> .)
    TO              reduce using rule 142 (np_rem_fake_bottom -> .)

    np_rem_fake_bottom             shift and go to state 266

state 240

    (111) exp_or -> | np_push_operator . expression
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    expression                     shift and go to state 267
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 241

    (117) t_and -> & np_push_operator . t_exp
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    t_exp                          shift and go to state 268
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 242

    (121) g_exp_opers -> EQUAL_TO np_push_operator . g_exp
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    g_exp                          shift and go to state 269
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 243

    (122) g_exp_opers -> NOT_EQUAL_TO np_push_operator . g_exp
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    g_exp                          shift and go to state 270
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 244

    (123) g_exp_opers -> LESS_OR_EQUAL_TO np_push_operator . g_exp
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    g_exp                          shift and go to state 271
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 245

    (124) g_exp_opers -> GREATER_OR_EQUAL_TO np_push_operator . g_exp
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    g_exp                          shift and go to state 272
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 246

    (125) g_exp_opers -> > np_push_operator . g_exp
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    g_exp                          shift and go to state 273
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 247

    (126) g_exp_opers -> < np_push_operator . g_exp
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    g_exp                          shift and go to state 274
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 248

    (130) m_opers -> - np_push_operator . m_exp
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    m_exp                          shift and go to state 275
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 249

    (131) m_opers -> + np_push_operator . m_exp
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    m_exp                          shift and go to state 276
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 250

    (135) t_opers -> / np_push_operator . t
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    t                              shift and go to state 277
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 251

    (136) t_opers -> * np_push_operator . t
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    t                              shift and go to state 278
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 252

    (76) conditional -> IF ( expression ) np_if { . body } opt_else np_end_if
    (53) body -> . opt_stmts
    (54) opt_stmts -> . eps
    (55) opt_stmts -> . statements opt_stmts
    (149) eps -> .
    (56) statements -> . function_return
    (57) statements -> . call_func
    (58) statements -> . cycles
    (59) statements -> . conditional
    (60) statements -> . assign
    (61) statements -> . read
    (62) statements -> . print
    (101) function_return -> . RETURN ( expression ) ;
    (89) call_func -> . call_func_body ;
    (82) cycles -> . while_loop
    (83) cycles -> . for_loop
    (76) conditional -> . IF ( expression ) np_if { body } opt_else np_end_if
    (74) assign -> . variable = np_push_operator expression ; np_check_assignment_operator
    (69) read -> . READ ( r_args ) ;
    (63) print -> . PRINT ( p_args ) ;
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (85) while_loop -> . WHILE np_cycle_start ( expression ) np_while { body } np_while_return
    (84) for_loop -> . FOR ( ID = expression TO expression ) { body }
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    }               reduce using rule 149 (eps -> .)
    RETURN          shift and go to state 101
    IF              shift and go to state 105
    READ            shift and go to state 107
    PRINT           shift and go to state 108
    ID              shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111

    body                           shift and go to state 279
    opt_stmts                      shift and go to state 91
    eps                            shift and go to state 92
    statements                     shift and go to state 93
    function_return                shift and go to state 94
    call_func                      shift and go to state 95
    cycles                         shift and go to state 96
    conditional                    shift and go to state 97
    assign                         shift and go to state 98
    read                           shift and go to state 99
    print                          shift and go to state 100
    call_func_body                 shift and go to state 102
    while_loop                     shift and go to state 103
    for_loop                       shift and go to state 104
    variable                       shift and go to state 106

state 253

    (74) assign -> variable = np_push_operator expression ; np_check_assignment_operator .
    RETURN          reduce using rule 74 (assign -> variable = np_push_operator expression ; np_check_assignment_operator .)
    IF              reduce using rule 74 (assign -> variable = np_push_operator expression ; np_check_assignment_operator .)
    READ            reduce using rule 74 (assign -> variable = np_push_operator expression ; np_check_assignment_operator .)
    PRINT           reduce using rule 74 (assign -> variable = np_push_operator expression ; np_check_assignment_operator .)
    ID              reduce using rule 74 (assign -> variable = np_push_operator expression ; np_check_assignment_operator .)
    WHILE           reduce using rule 74 (assign -> variable = np_push_operator expression ; np_check_assignment_operator .)
    FOR             reduce using rule 74 (assign -> variable = np_push_operator expression ; np_check_assignment_operator .)
    }               reduce using rule 74 (assign -> variable = np_push_operator expression ; np_check_assignment_operator .)


state 254

    (72) more_r_args -> , r_args .
    )               reduce using rule 72 (more_r_args -> , r_args .)


state 255

    (68) more_args -> , p_args .
    )               reduce using rule 68 (more_args -> , p_args .)


state 256

    (90) call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params . ) np_func_gosub
    )               shift and go to state 280


state 257

    (96) opt_call_params -> eps .
    )               reduce using rule 96 (opt_call_params -> eps .)


state 258

    (97) opt_call_params -> expression . np_func_param more_expressions
    (98) np_func_param -> .
    ,               reduce using rule 98 (np_func_param -> .)
    )               reduce using rule 98 (np_func_param -> .)

    np_func_param                  shift and go to state 281

state 259

    (105) opt_arr_call -> [ expression opt_dim_call ] .
    =               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    /               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    *               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    -               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    +               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    EQUAL_TO        reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    NOT_EQUAL_TO    reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    LESS_OR_EQUAL_TO reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    GREATER_OR_EQUAL_TO reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    >               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    <               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    &               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    |               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    )               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    ,               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    ;               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    ]               reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)
    TO              reduce using rule 105 (opt_arr_call -> [ expression opt_dim_call ] .)


state 260

    (107) opt_dim_call -> , expression .
    ]               reduce using rule 107 (opt_dim_call -> , expression .)


state 261

    (85) while_loop -> WHILE np_cycle_start ( expression ) np_while . { body } np_while_return
    {               shift and go to state 282


state 262

    (84) for_loop -> FOR ( ID = expression TO . expression ) { body }
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    expression                     shift and go to state 283
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 263

    (39) function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc . np_exit_scope functions
    (12) np_exit_scope -> .
    FUNC            reduce using rule 12 (np_exit_scope -> .)
    MAIN            reduce using rule 12 (np_exit_scope -> .)
    }               reduce using rule 12 (np_exit_scope -> .)

    np_exit_scope                  shift and go to state 284

state 264

    (47) moreparams -> , param opt_param .
    CHAR            reduce using rule 47 (moreparams -> , param opt_param .)
    FLOAT           reduce using rule 47 (moreparams -> , param opt_param .)
    INT             reduce using rule 47 (moreparams -> , param opt_param .)
    )               reduce using rule 47 (moreparams -> , param opt_param .)


state 265

    (25) more_arr_ids -> , ID np_save_id [ CTE_INT two_dim ] . more_arr_ids
    (24) more_arr_ids -> . eps
    (25) more_arr_ids -> . , ID np_save_id [ CTE_INT two_dim ] more_arr_ids
    (149) eps -> .
    ,               shift and go to state 88
    ;               reduce using rule 149 (eps -> .)

    more_arr_ids                   shift and go to state 285
    eps                            shift and go to state 87

state 266

    (140) f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .
    /               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    *               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    -               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    +               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    EQUAL_TO        reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    NOT_EQUAL_TO    reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    LESS_OR_EQUAL_TO reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    GREATER_OR_EQUAL_TO reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    >               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    <               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    &               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    |               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    )               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    ,               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    ;               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    ]               reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)
    TO              reduce using rule 140 (f -> ( np_add_fake_bottom expression ) np_rem_fake_bottom .)


state 267

    (111) exp_or -> | np_push_operator expression .
    )               reduce using rule 111 (exp_or -> | np_push_operator expression .)
    ,               reduce using rule 111 (exp_or -> | np_push_operator expression .)
    ;               reduce using rule 111 (exp_or -> | np_push_operator expression .)
    ]               reduce using rule 111 (exp_or -> | np_push_operator expression .)
    TO              reduce using rule 111 (exp_or -> | np_push_operator expression .)


state 268

    (117) t_and -> & np_push_operator t_exp .
    |               reduce using rule 117 (t_and -> & np_push_operator t_exp .)
    )               reduce using rule 117 (t_and -> & np_push_operator t_exp .)
    ,               reduce using rule 117 (t_and -> & np_push_operator t_exp .)
    ;               reduce using rule 117 (t_and -> & np_push_operator t_exp .)
    ]               reduce using rule 117 (t_and -> & np_push_operator t_exp .)
    TO              reduce using rule 117 (t_and -> & np_push_operator t_exp .)


state 269

    (121) g_exp_opers -> EQUAL_TO np_push_operator g_exp .
    &               reduce using rule 121 (g_exp_opers -> EQUAL_TO np_push_operator g_exp .)
    |               reduce using rule 121 (g_exp_opers -> EQUAL_TO np_push_operator g_exp .)
    )               reduce using rule 121 (g_exp_opers -> EQUAL_TO np_push_operator g_exp .)
    ,               reduce using rule 121 (g_exp_opers -> EQUAL_TO np_push_operator g_exp .)
    ;               reduce using rule 121 (g_exp_opers -> EQUAL_TO np_push_operator g_exp .)
    ]               reduce using rule 121 (g_exp_opers -> EQUAL_TO np_push_operator g_exp .)
    TO              reduce using rule 121 (g_exp_opers -> EQUAL_TO np_push_operator g_exp .)


state 270

    (122) g_exp_opers -> NOT_EQUAL_TO np_push_operator g_exp .
    &               reduce using rule 122 (g_exp_opers -> NOT_EQUAL_TO np_push_operator g_exp .)
    |               reduce using rule 122 (g_exp_opers -> NOT_EQUAL_TO np_push_operator g_exp .)
    )               reduce using rule 122 (g_exp_opers -> NOT_EQUAL_TO np_push_operator g_exp .)
    ,               reduce using rule 122 (g_exp_opers -> NOT_EQUAL_TO np_push_operator g_exp .)
    ;               reduce using rule 122 (g_exp_opers -> NOT_EQUAL_TO np_push_operator g_exp .)
    ]               reduce using rule 122 (g_exp_opers -> NOT_EQUAL_TO np_push_operator g_exp .)
    TO              reduce using rule 122 (g_exp_opers -> NOT_EQUAL_TO np_push_operator g_exp .)


state 271

    (123) g_exp_opers -> LESS_OR_EQUAL_TO np_push_operator g_exp .
    &               reduce using rule 123 (g_exp_opers -> LESS_OR_EQUAL_TO np_push_operator g_exp .)
    |               reduce using rule 123 (g_exp_opers -> LESS_OR_EQUAL_TO np_push_operator g_exp .)
    )               reduce using rule 123 (g_exp_opers -> LESS_OR_EQUAL_TO np_push_operator g_exp .)
    ,               reduce using rule 123 (g_exp_opers -> LESS_OR_EQUAL_TO np_push_operator g_exp .)
    ;               reduce using rule 123 (g_exp_opers -> LESS_OR_EQUAL_TO np_push_operator g_exp .)
    ]               reduce using rule 123 (g_exp_opers -> LESS_OR_EQUAL_TO np_push_operator g_exp .)
    TO              reduce using rule 123 (g_exp_opers -> LESS_OR_EQUAL_TO np_push_operator g_exp .)


state 272

    (124) g_exp_opers -> GREATER_OR_EQUAL_TO np_push_operator g_exp .
    &               reduce using rule 124 (g_exp_opers -> GREATER_OR_EQUAL_TO np_push_operator g_exp .)
    |               reduce using rule 124 (g_exp_opers -> GREATER_OR_EQUAL_TO np_push_operator g_exp .)
    )               reduce using rule 124 (g_exp_opers -> GREATER_OR_EQUAL_TO np_push_operator g_exp .)
    ,               reduce using rule 124 (g_exp_opers -> GREATER_OR_EQUAL_TO np_push_operator g_exp .)
    ;               reduce using rule 124 (g_exp_opers -> GREATER_OR_EQUAL_TO np_push_operator g_exp .)
    ]               reduce using rule 124 (g_exp_opers -> GREATER_OR_EQUAL_TO np_push_operator g_exp .)
    TO              reduce using rule 124 (g_exp_opers -> GREATER_OR_EQUAL_TO np_push_operator g_exp .)


state 273

    (125) g_exp_opers -> > np_push_operator g_exp .
    &               reduce using rule 125 (g_exp_opers -> > np_push_operator g_exp .)
    |               reduce using rule 125 (g_exp_opers -> > np_push_operator g_exp .)
    )               reduce using rule 125 (g_exp_opers -> > np_push_operator g_exp .)
    ,               reduce using rule 125 (g_exp_opers -> > np_push_operator g_exp .)
    ;               reduce using rule 125 (g_exp_opers -> > np_push_operator g_exp .)
    ]               reduce using rule 125 (g_exp_opers -> > np_push_operator g_exp .)
    TO              reduce using rule 125 (g_exp_opers -> > np_push_operator g_exp .)


state 274

    (126) g_exp_opers -> < np_push_operator g_exp .
    &               reduce using rule 126 (g_exp_opers -> < np_push_operator g_exp .)
    |               reduce using rule 126 (g_exp_opers -> < np_push_operator g_exp .)
    )               reduce using rule 126 (g_exp_opers -> < np_push_operator g_exp .)
    ,               reduce using rule 126 (g_exp_opers -> < np_push_operator g_exp .)
    ;               reduce using rule 126 (g_exp_opers -> < np_push_operator g_exp .)
    ]               reduce using rule 126 (g_exp_opers -> < np_push_operator g_exp .)
    TO              reduce using rule 126 (g_exp_opers -> < np_push_operator g_exp .)


state 275

    (130) m_opers -> - np_push_operator m_exp .
    EQUAL_TO        reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    NOT_EQUAL_TO    reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    LESS_OR_EQUAL_TO reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    GREATER_OR_EQUAL_TO reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    >               reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    <               reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    &               reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    |               reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    )               reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    ,               reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    ;               reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    ]               reduce using rule 130 (m_opers -> - np_push_operator m_exp .)
    TO              reduce using rule 130 (m_opers -> - np_push_operator m_exp .)


state 276

    (131) m_opers -> + np_push_operator m_exp .
    EQUAL_TO        reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    NOT_EQUAL_TO    reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    LESS_OR_EQUAL_TO reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    GREATER_OR_EQUAL_TO reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    >               reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    <               reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    &               reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    |               reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    )               reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    ,               reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    ;               reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    ]               reduce using rule 131 (m_opers -> + np_push_operator m_exp .)
    TO              reduce using rule 131 (m_opers -> + np_push_operator m_exp .)


state 277

    (135) t_opers -> / np_push_operator t .
    -               reduce using rule 135 (t_opers -> / np_push_operator t .)
    +               reduce using rule 135 (t_opers -> / np_push_operator t .)
    EQUAL_TO        reduce using rule 135 (t_opers -> / np_push_operator t .)
    NOT_EQUAL_TO    reduce using rule 135 (t_opers -> / np_push_operator t .)
    LESS_OR_EQUAL_TO reduce using rule 135 (t_opers -> / np_push_operator t .)
    GREATER_OR_EQUAL_TO reduce using rule 135 (t_opers -> / np_push_operator t .)
    >               reduce using rule 135 (t_opers -> / np_push_operator t .)
    <               reduce using rule 135 (t_opers -> / np_push_operator t .)
    &               reduce using rule 135 (t_opers -> / np_push_operator t .)
    |               reduce using rule 135 (t_opers -> / np_push_operator t .)
    )               reduce using rule 135 (t_opers -> / np_push_operator t .)
    ,               reduce using rule 135 (t_opers -> / np_push_operator t .)
    ;               reduce using rule 135 (t_opers -> / np_push_operator t .)
    ]               reduce using rule 135 (t_opers -> / np_push_operator t .)
    TO              reduce using rule 135 (t_opers -> / np_push_operator t .)


state 278

    (136) t_opers -> * np_push_operator t .
    -               reduce using rule 136 (t_opers -> * np_push_operator t .)
    +               reduce using rule 136 (t_opers -> * np_push_operator t .)
    EQUAL_TO        reduce using rule 136 (t_opers -> * np_push_operator t .)
    NOT_EQUAL_TO    reduce using rule 136 (t_opers -> * np_push_operator t .)
    LESS_OR_EQUAL_TO reduce using rule 136 (t_opers -> * np_push_operator t .)
    GREATER_OR_EQUAL_TO reduce using rule 136 (t_opers -> * np_push_operator t .)
    >               reduce using rule 136 (t_opers -> * np_push_operator t .)
    <               reduce using rule 136 (t_opers -> * np_push_operator t .)
    &               reduce using rule 136 (t_opers -> * np_push_operator t .)
    |               reduce using rule 136 (t_opers -> * np_push_operator t .)
    )               reduce using rule 136 (t_opers -> * np_push_operator t .)
    ,               reduce using rule 136 (t_opers -> * np_push_operator t .)
    ;               reduce using rule 136 (t_opers -> * np_push_operator t .)
    ]               reduce using rule 136 (t_opers -> * np_push_operator t .)
    TO              reduce using rule 136 (t_opers -> * np_push_operator t .)


state 279

    (76) conditional -> IF ( expression ) np_if { body . } opt_else np_end_if
    }               shift and go to state 286


state 280

    (90) call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) . np_func_gosub
    (95) np_func_gosub -> .
    ;               reduce using rule 95 (np_func_gosub -> .)
    /               reduce using rule 95 (np_func_gosub -> .)
    *               reduce using rule 95 (np_func_gosub -> .)
    -               reduce using rule 95 (np_func_gosub -> .)
    +               reduce using rule 95 (np_func_gosub -> .)
    EQUAL_TO        reduce using rule 95 (np_func_gosub -> .)
    NOT_EQUAL_TO    reduce using rule 95 (np_func_gosub -> .)
    LESS_OR_EQUAL_TO reduce using rule 95 (np_func_gosub -> .)
    GREATER_OR_EQUAL_TO reduce using rule 95 (np_func_gosub -> .)
    >               reduce using rule 95 (np_func_gosub -> .)
    <               reduce using rule 95 (np_func_gosub -> .)
    &               reduce using rule 95 (np_func_gosub -> .)
    |               reduce using rule 95 (np_func_gosub -> .)
    )               reduce using rule 95 (np_func_gosub -> .)
    ,               reduce using rule 95 (np_func_gosub -> .)
    ]               reduce using rule 95 (np_func_gosub -> .)
    TO              reduce using rule 95 (np_func_gosub -> .)

    np_func_gosub                  shift and go to state 287

state 281

    (97) opt_call_params -> expression np_func_param . more_expressions
    (99) more_expressions -> . eps
    (100) more_expressions -> . , opt_call_params
    (149) eps -> .
    ,               shift and go to state 290
    )               reduce using rule 149 (eps -> .)

    more_expressions               shift and go to state 288
    eps                            shift and go to state 289

state 282

    (85) while_loop -> WHILE np_cycle_start ( expression ) np_while { . body } np_while_return
    (53) body -> . opt_stmts
    (54) opt_stmts -> . eps
    (55) opt_stmts -> . statements opt_stmts
    (149) eps -> .
    (56) statements -> . function_return
    (57) statements -> . call_func
    (58) statements -> . cycles
    (59) statements -> . conditional
    (60) statements -> . assign
    (61) statements -> . read
    (62) statements -> . print
    (101) function_return -> . RETURN ( expression ) ;
    (89) call_func -> . call_func_body ;
    (82) cycles -> . while_loop
    (83) cycles -> . for_loop
    (76) conditional -> . IF ( expression ) np_if { body } opt_else np_end_if
    (74) assign -> . variable = np_push_operator expression ; np_check_assignment_operator
    (69) read -> . READ ( r_args ) ;
    (63) print -> . PRINT ( p_args ) ;
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (85) while_loop -> . WHILE np_cycle_start ( expression ) np_while { body } np_while_return
    (84) for_loop -> . FOR ( ID = expression TO expression ) { body }
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    }               reduce using rule 149 (eps -> .)
    RETURN          shift and go to state 101
    IF              shift and go to state 105
    READ            shift and go to state 107
    PRINT           shift and go to state 108
    ID              shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111

    body                           shift and go to state 291
    opt_stmts                      shift and go to state 91
    eps                            shift and go to state 92
    statements                     shift and go to state 93
    function_return                shift and go to state 94
    call_func                      shift and go to state 95
    cycles                         shift and go to state 96
    conditional                    shift and go to state 97
    assign                         shift and go to state 98
    read                           shift and go to state 99
    print                          shift and go to state 100
    call_func_body                 shift and go to state 102
    while_loop                     shift and go to state 103
    for_loop                       shift and go to state 104
    variable                       shift and go to state 106

state 283

    (84) for_loop -> FOR ( ID = expression TO expression . ) { body }
    )               shift and go to state 292


state 284

    (39) function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope . functions
    (37) functions -> . eps
    (38) functions -> . function
    (149) eps -> .
    (39) function -> . FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions
    MAIN            reduce using rule 149 (eps -> .)
    }               reduce using rule 149 (eps -> .)
    FUNC            shift and go to state 20

    functions                      shift and go to state 293
    eps                            shift and go to state 134
    function                       shift and go to state 19

state 285

    (25) more_arr_ids -> , ID np_save_id [ CTE_INT two_dim ] more_arr_ids .
    ;               reduce using rule 25 (more_arr_ids -> , ID np_save_id [ CTE_INT two_dim ] more_arr_ids .)


state 286

    (76) conditional -> IF ( expression ) np_if { body } . opt_else np_end_if
    (79) opt_else -> . eps
    (80) opt_else -> . ELSE np_else { body }
    (149) eps -> .
    ELSE            shift and go to state 296
    RETURN          reduce using rule 149 (eps -> .)
    IF              reduce using rule 149 (eps -> .)
    READ            reduce using rule 149 (eps -> .)
    PRINT           reduce using rule 149 (eps -> .)
    ID              reduce using rule 149 (eps -> .)
    WHILE           reduce using rule 149 (eps -> .)
    FOR             reduce using rule 149 (eps -> .)
    }               reduce using rule 149 (eps -> .)

    opt_else                       shift and go to state 294
    eps                            shift and go to state 295

state 287

    (90) call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .
    ;               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    /               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    *               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    -               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    +               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    EQUAL_TO        reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    NOT_EQUAL_TO    reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    LESS_OR_EQUAL_TO reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    GREATER_OR_EQUAL_TO reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    >               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    <               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    &               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    |               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    )               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    ,               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    ]               reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)
    TO              reduce using rule 90 (call_func_body -> ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub .)


state 288

    (97) opt_call_params -> expression np_func_param more_expressions .
    )               reduce using rule 97 (opt_call_params -> expression np_func_param more_expressions .)


state 289

    (99) more_expressions -> eps .
    )               reduce using rule 99 (more_expressions -> eps .)


state 290

    (100) more_expressions -> , . opt_call_params
    (96) opt_call_params -> . eps
    (97) opt_call_params -> . expression np_func_param more_expressions
    (149) eps -> .
    (108) expression -> . t_exp np_check_or_operator exp_or
    (114) t_exp -> . g_exp np_check_and_operator t_and
    (118) g_exp -> . m_exp np_check_g_operator g_exp_opers
    (127) m_exp -> . t np_check_m_operator m_opers
    (132) t -> . f np_check_t_operator t_opers
    (137) f -> . var_cte
    (138) f -> . call_func_body
    (139) f -> . variable
    (140) f -> . ( np_add_fake_bottom expression ) np_rem_fake_bottom
    (143) var_cte -> . CTE_CHAR
    (144) var_cte -> . CTE_FLOAT
    (145) var_cte -> . CTE_INT
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    )               reduce using rule 149 (eps -> .)
    (               shift and go to state 137
    CTE_CHAR        shift and go to state 147
    CTE_FLOAT       shift and go to state 148
    CTE_INT         shift and go to state 149
    ID              shift and go to state 109

    opt_call_params                shift and go to state 297
    eps                            shift and go to state 257
    expression                     shift and go to state 258
    t_exp                          shift and go to state 139
    g_exp                          shift and go to state 140
    m_exp                          shift and go to state 141
    t                              shift and go to state 142
    f                              shift and go to state 143
    var_cte                        shift and go to state 144
    call_func_body                 shift and go to state 145
    variable                       shift and go to state 146

state 291

    (85) while_loop -> WHILE np_cycle_start ( expression ) np_while { body . } np_while_return
    }               shift and go to state 298


state 292

    (84) for_loop -> FOR ( ID = expression TO expression ) . { body }
    {               shift and go to state 299


state 293

    (39) function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions .
    MAIN            reduce using rule 39 (function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions .)
    }               reduce using rule 39 (function -> FUNC func_types ID np_save_func_id ( np_create_var_table opt_param ) opt_vars { body } np_endfunc np_exit_scope functions .)


state 294

    (76) conditional -> IF ( expression ) np_if { body } opt_else . np_end_if
    (78) np_end_if -> .
    RETURN          reduce using rule 78 (np_end_if -> .)
    IF              reduce using rule 78 (np_end_if -> .)
    READ            reduce using rule 78 (np_end_if -> .)
    PRINT           reduce using rule 78 (np_end_if -> .)
    ID              reduce using rule 78 (np_end_if -> .)
    WHILE           reduce using rule 78 (np_end_if -> .)
    FOR             reduce using rule 78 (np_end_if -> .)
    }               reduce using rule 78 (np_end_if -> .)

    np_end_if                      shift and go to state 300

state 295

    (79) opt_else -> eps .
    RETURN          reduce using rule 79 (opt_else -> eps .)
    IF              reduce using rule 79 (opt_else -> eps .)
    READ            reduce using rule 79 (opt_else -> eps .)
    PRINT           reduce using rule 79 (opt_else -> eps .)
    ID              reduce using rule 79 (opt_else -> eps .)
    WHILE           reduce using rule 79 (opt_else -> eps .)
    FOR             reduce using rule 79 (opt_else -> eps .)
    }               reduce using rule 79 (opt_else -> eps .)


state 296

    (80) opt_else -> ELSE . np_else { body }
    (81) np_else -> .
    {               reduce using rule 81 (np_else -> .)

    np_else                        shift and go to state 301

state 297

    (100) more_expressions -> , opt_call_params .
    )               reduce using rule 100 (more_expressions -> , opt_call_params .)


state 298

    (85) while_loop -> WHILE np_cycle_start ( expression ) np_while { body } . np_while_return
    (88) np_while_return -> .
    RETURN          reduce using rule 88 (np_while_return -> .)
    IF              reduce using rule 88 (np_while_return -> .)
    READ            reduce using rule 88 (np_while_return -> .)
    PRINT           reduce using rule 88 (np_while_return -> .)
    ID              reduce using rule 88 (np_while_return -> .)
    WHILE           reduce using rule 88 (np_while_return -> .)
    FOR             reduce using rule 88 (np_while_return -> .)
    }               reduce using rule 88 (np_while_return -> .)

    np_while_return                shift and go to state 302

state 299

    (84) for_loop -> FOR ( ID = expression TO expression ) { . body }
    (53) body -> . opt_stmts
    (54) opt_stmts -> . eps
    (55) opt_stmts -> . statements opt_stmts
    (149) eps -> .
    (56) statements -> . function_return
    (57) statements -> . call_func
    (58) statements -> . cycles
    (59) statements -> . conditional
    (60) statements -> . assign
    (61) statements -> . read
    (62) statements -> . print
    (101) function_return -> . RETURN ( expression ) ;
    (89) call_func -> . call_func_body ;
    (82) cycles -> . while_loop
    (83) cycles -> . for_loop
    (76) conditional -> . IF ( expression ) np_if { body } opt_else np_end_if
    (74) assign -> . variable = np_push_operator expression ; np_check_assignment_operator
    (69) read -> . READ ( r_args ) ;
    (63) print -> . PRINT ( p_args ) ;
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (85) while_loop -> . WHILE np_cycle_start ( expression ) np_while { body } np_while_return
    (84) for_loop -> . FOR ( ID = expression TO expression ) { body }
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    }               reduce using rule 149 (eps -> .)
    RETURN          shift and go to state 101
    IF              shift and go to state 105
    READ            shift and go to state 107
    PRINT           shift and go to state 108
    ID              shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111

    body                           shift and go to state 303
    opt_stmts                      shift and go to state 91
    eps                            shift and go to state 92
    statements                     shift and go to state 93
    function_return                shift and go to state 94
    call_func                      shift and go to state 95
    cycles                         shift and go to state 96
    conditional                    shift and go to state 97
    assign                         shift and go to state 98
    read                           shift and go to state 99
    print                          shift and go to state 100
    call_func_body                 shift and go to state 102
    while_loop                     shift and go to state 103
    for_loop                       shift and go to state 104
    variable                       shift and go to state 106

state 300

    (76) conditional -> IF ( expression ) np_if { body } opt_else np_end_if .
    RETURN          reduce using rule 76 (conditional -> IF ( expression ) np_if { body } opt_else np_end_if .)
    IF              reduce using rule 76 (conditional -> IF ( expression ) np_if { body } opt_else np_end_if .)
    READ            reduce using rule 76 (conditional -> IF ( expression ) np_if { body } opt_else np_end_if .)
    PRINT           reduce using rule 76 (conditional -> IF ( expression ) np_if { body } opt_else np_end_if .)
    ID              reduce using rule 76 (conditional -> IF ( expression ) np_if { body } opt_else np_end_if .)
    WHILE           reduce using rule 76 (conditional -> IF ( expression ) np_if { body } opt_else np_end_if .)
    FOR             reduce using rule 76 (conditional -> IF ( expression ) np_if { body } opt_else np_end_if .)
    }               reduce using rule 76 (conditional -> IF ( expression ) np_if { body } opt_else np_end_if .)


state 301

    (80) opt_else -> ELSE np_else . { body }
    {               shift and go to state 304


state 302

    (85) while_loop -> WHILE np_cycle_start ( expression ) np_while { body } np_while_return .
    RETURN          reduce using rule 85 (while_loop -> WHILE np_cycle_start ( expression ) np_while { body } np_while_return .)
    IF              reduce using rule 85 (while_loop -> WHILE np_cycle_start ( expression ) np_while { body } np_while_return .)
    READ            reduce using rule 85 (while_loop -> WHILE np_cycle_start ( expression ) np_while { body } np_while_return .)
    PRINT           reduce using rule 85 (while_loop -> WHILE np_cycle_start ( expression ) np_while { body } np_while_return .)
    ID              reduce using rule 85 (while_loop -> WHILE np_cycle_start ( expression ) np_while { body } np_while_return .)
    WHILE           reduce using rule 85 (while_loop -> WHILE np_cycle_start ( expression ) np_while { body } np_while_return .)
    FOR             reduce using rule 85 (while_loop -> WHILE np_cycle_start ( expression ) np_while { body } np_while_return .)
    }               reduce using rule 85 (while_loop -> WHILE np_cycle_start ( expression ) np_while { body } np_while_return .)


state 303

    (84) for_loop -> FOR ( ID = expression TO expression ) { body . }
    }               shift and go to state 305


state 304

    (80) opt_else -> ELSE np_else { . body }
    (53) body -> . opt_stmts
    (54) opt_stmts -> . eps
    (55) opt_stmts -> . statements opt_stmts
    (149) eps -> .
    (56) statements -> . function_return
    (57) statements -> . call_func
    (58) statements -> . cycles
    (59) statements -> . conditional
    (60) statements -> . assign
    (61) statements -> . read
    (62) statements -> . print
    (101) function_return -> . RETURN ( expression ) ;
    (89) call_func -> . call_func_body ;
    (82) cycles -> . while_loop
    (83) cycles -> . for_loop
    (76) conditional -> . IF ( expression ) np_if { body } opt_else np_end_if
    (74) assign -> . variable = np_push_operator expression ; np_check_assignment_operator
    (69) read -> . READ ( r_args ) ;
    (63) print -> . PRINT ( p_args ) ;
    (90) call_func_body -> . ID opt_class_func np_func_call ( np_func_ERA opt_call_params ) np_func_gosub
    (85) while_loop -> . WHILE np_cycle_start ( expression ) np_while { body } np_while_return
    (84) for_loop -> . FOR ( ID = expression TO expression ) { body }
    (102) variable -> . ID opt_class_func opt_arr_call np_push_var_operand
    }               reduce using rule 149 (eps -> .)
    RETURN          shift and go to state 101
    IF              shift and go to state 105
    READ            shift and go to state 107
    PRINT           shift and go to state 108
    ID              shift and go to state 109
    WHILE           shift and go to state 110
    FOR             shift and go to state 111

    body                           shift and go to state 306
    opt_stmts                      shift and go to state 91
    eps                            shift and go to state 92
    statements                     shift and go to state 93
    function_return                shift and go to state 94
    call_func                      shift and go to state 95
    cycles                         shift and go to state 96
    conditional                    shift and go to state 97
    assign                         shift and go to state 98
    read                           shift and go to state 99
    print                          shift and go to state 100
    call_func_body                 shift and go to state 102
    while_loop                     shift and go to state 103
    for_loop                       shift and go to state 104
    variable                       shift and go to state 106

state 305

    (84) for_loop -> FOR ( ID = expression TO expression ) { body } .
    RETURN          reduce using rule 84 (for_loop -> FOR ( ID = expression TO expression ) { body } .)
    IF              reduce using rule 84 (for_loop -> FOR ( ID = expression TO expression ) { body } .)
    READ            reduce using rule 84 (for_loop -> FOR ( ID = expression TO expression ) { body } .)
    PRINT           reduce using rule 84 (for_loop -> FOR ( ID = expression TO expression ) { body } .)
    ID              reduce using rule 84 (for_loop -> FOR ( ID = expression TO expression ) { body } .)
    WHILE           reduce using rule 84 (for_loop -> FOR ( ID = expression TO expression ) { body } .)
    FOR             reduce using rule 84 (for_loop -> FOR ( ID = expression TO expression ) { body } .)
    }               reduce using rule 84 (for_loop -> FOR ( ID = expression TO expression ) { body } .)


state 306

    (80) opt_else -> ELSE np_else { body . }
    }               shift and go to state 307


state 307

    (80) opt_else -> ELSE np_else { body } .
    RETURN          reduce using rule 80 (opt_else -> ELSE np_else { body } .)
    IF              reduce using rule 80 (opt_else -> ELSE np_else { body } .)
    READ            reduce using rule 80 (opt_else -> ELSE np_else { body } .)
    PRINT           reduce using rule 80 (opt_else -> ELSE np_else { body } .)
    ID              reduce using rule 80 (opt_else -> ELSE np_else { body } .)
    WHILE           reduce using rule 80 (opt_else -> ELSE np_else { body } .)
    FOR             reduce using rule 80 (opt_else -> ELSE np_else { body } .)
    }               reduce using rule 80 (opt_else -> ELSE np_else { body } .)


Conflicts:

shift/reduce conflict for CHAR in state 237 resolved as shift
shift/reduce conflict for FLOAT in state 237 resolved as shift
shift/reduce conflict for INT in state 237 resolved as shift
reduce/reduce conflict in state 12 resolved using rule opt_classes -> eps
rejected rule (classes -> eps) in state 12
reduce/reduce conflict in state 17 resolved using rule opt_funcs -> eps
rejected rule (functions -> eps) in state 17